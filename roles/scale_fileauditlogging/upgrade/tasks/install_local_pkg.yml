---
# Local package installation method

- block:  ## run_once: true
    - name: upgrade | Stat local installation package
      stat:
        path: "{{ scale_install_localpkg_path }}"
        checksum_algorithm: md5
      register: scale_install_localpkg

    - name: upgrade | Check local installation package
      assert:
        that: scale_install_localpkg.stat.exists
        msg: >-
          Please set the variable 'scale_install_localpkg_path' to point to the
          local installation package (accessible on Ansible control machine)!
#
# Optionally, verify package checksum
#
    - name: upgrade | Stat checksum file
      stat:
        path: "{{ scale_install_localpkg_path }}.md5"
      register: scale_install_md5_file

    - block:  ## when: scale_install_md5_file.stat.exists
        - name: upgrade | Read checksum from file
          set_fact:
            scale_install_md5_sum: "{{ lookup('file', scale_install_localpkg_path + '.md5') }}"

        - name: upgrade | Compare checksums
          assert:
            that: scale_install_md5_sum.strip().split().0 == scale_install_localpkg.stat.checksum
            msg: >-
              Checksums don't match. Please check integritiy of your local
              installation package!
      when: scale_install_md5_file.stat.exists
  run_once: true
  delegate_to: localhost

#
# Copy installation package
#
- name: upgrade | Stat extracted packages
  stat:
    path: "{{ scale_gpfs_path_url }}"
  register: scale_install_gpfs_packagedir

- block:  ## when: not scale_install_gpfs_packagedir.stat.exists
    - name: upgrade | Stat temporary directory
      stat:
        path: "{{ scale_install_localpkg_tmpdir_path }}"
      register: scale_install_localpkg_tmpdir

    - name: upgrade | Check temporary directory
      assert:
        that:
          - scale_install_localpkg_tmpdir.stat.exists
          - scale_install_localpkg_tmpdir.stat.isdir
        msg: >-
          Please set the variable 'scale_install_localpkg_tmpdir_path' to point
          to a temporary directory on the remote system!
    - name: upgrade | Copy installation package to node
      copy:
        src: "{{ scale_install_localpkg_path }}"
        dest: "{{ scale_install_localpkg_tmpdir_path }}"
        mode: a+x
  when: not scale_install_gpfs_packagedir.stat.exists

#
# Extract installation package
#
- name: upgrade | Extract installation package
  vars:
    localpkg: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
  command: "{{ localpkg + ' --silent' }}"
  args:
    creates: "{{ scale_gpfs_path_url }}"

- name: upgrade | Stat extracted packages
  stat:
    path: "{{ scale_gpfs_path_url }}"
  register: scale_install_gpfs_packagedir

- name: upgrade | Check extracted packages
  assert:
    that:
      - scale_install_gpfs_packagedir.stat.exists
      - scale_install_gpfs_packagedir.stat.isdir
    msg: >-
      The variable 'scale_version' doesn't seem to match the contents of the
      local installation package!
#
# Delete installation package
#
- name: upgrade | Delete installation package from node
  file:
    path: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
    state: absent

- name: upgrade | file audit logging path
  set_fact:
    scale_fal_url: 'gpfs_rpms/rhel/'
  when: ansible_distribution in scale_rhel_distribution
  
- name: upgrade | file audit logging path
  set_fact:
    scale_fal_url: 'gpfs_debs/ubuntu/'
  when: ansible_distribution in scale_ubuntu_distribution

- name: upgrade | file audit logging path
  set_fact:
    scale_fal_url: 'gpfs_debs/ubuntu/ubuntu20/'
  when:
    - ansible_distribution in scale_ubuntu_distribution and ansible_distribution_major_version == '20'
    - scale_version >= "5.1.4.0"
  
- name: upgrade | file audit logging path
  set_fact:
    scale_fal_url: 'gpfs_debs/ubuntu/ubuntu22/'
  when: ansible_distribution in scale_ubuntu_distribution and ansible_distribution_major_version == '22'
#todo wrong
- name: upgrade | file audit logging path
  set_fact:
    scale_fal_url: 'gpfs_rpms/rhel/'
  when: ansible_distribution in scale_sles_distribution

#
# Find file audit logging package
#
- block:
    #
    # Find GPFS librdkafka
    #
    - name: upgrade | Find gpfs.librdkafka (gpfs.librdkafka) package
      find:
        paths: "{{ scale_extracted_path }}/{{ scale_fal_url }}"
        patterns: gpfs.librdkafka*
      register: scale_install_gpfs_fal

    - name: upgrade | Check valid GPFS (gpfs.librdkafka) package
      assert:
        that: scale_install_gpfs_fal.matched > 0
        msg: >-
          No GPFS auditlogin librakafka(gpfs.librdkafka) package found
          {{ scale_extracted_path }}/{{ scale_fal_url }}gpfs.librdkafka*

    - name: upgrade | Add GPFS file audit logging packages to list
      vars:
        current_package: "{{ scale_extracted_path }}/{{ scale_fal_url }}/{{ item }}"
      set_fact:
        scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
      with_items:
        - "{{ scale_install_gpfs_fal.files.0.path | basename }}"
  when: (scale_fileauditlogging_enable | bool)
