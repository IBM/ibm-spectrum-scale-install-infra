---
# role to check if all ces configuration is properly defined
# protocols variable defined in group_vars/

- name: check | Initialize
  set_fact:
   scale_protocol_node_list: []
   scale_admin_node_list: []
   scale_os_list: []
   scale_arch_list: []
   scale_export_ip: []
   scale_export_node_ip_map: []
   scale_ces_export_ip: []
   scale_ces_ipv6_list: []
   scale_ces_ipv4_list: []
  run_once: true

- name: check | Collect all protocol nodes
  set_fact:
    scale_protocol_node_list: "{{ scale_protocol_node_list + [hostvars[item]['inventory_hostname']] }}"
  when: hostvars[item]['scale_protocol_node'] is defined and hostvars[item]['scale_protocol_node']|bool
  with_items:
   - "{{ ansible_play_hosts }}"
  delegate_to: localhost
  run_once: true

- name: check | Check if atleast one protocol node is present
  assert:
   that:
   - scale_protocol_node_list|length > 0
   fail_msg: "Atleast one protocol node is required.Please define a protocol node."
  delegate_to: localhost
  run_once: true

- name: check | Collect all protocol node OS
  set_fact:
   scale_os_list: "{{ scale_os_list + [hostvars[item]['ansible_distribution']] }}"
  when: hostvars[item]['scale_protocol_node'] is defined and hostvars[item]['scale_protocol_node']|bool
  with_items:
  - "{{ ansible_play_hosts }}"
  delegate_to: localhost

- name: check | Check if OS is unique
  assert:
   that:
   - scale_os_list|unique|length == 1
   fail_msg: "Mix Operating system found on protocol nodes, please make sure same OS on all protocol nodes."
  delegate_to: localhost
  run_once: true

- name: check | Collect all protocol node architecture
  set_fact:
   scale_arch_list: "{{ scale_arch_list + [hostvars[item]['ansible_architecture']] }}"
  when: hostvars[item]['scale_protocol_node'] is defined and hostvars[item]['scale_protocol_node']|bool
  with_items:
  - "{{ ansible_play_hosts }}"
  delegate_to: localhost

- name: check | Check if all protocol nodes have same architecture
  assert:
   that:
   - scale_arch_list|unique|length == 1
   fail_msg: "Mix architecture found on protocol nodes, please make sure all protocol nodes have same machine architecture."
  delegate_to: localhost
  run_once: true

- name: check | Check if cesSharedRoot filesystem defined
  assert:
   that:
   - scale_protocols.filesystem is defined
   - scale_protocols.filesystem | length > 0
   fail_msg: "Installer did not find the file system to be used for CES (protocols) shared root.
Please define the CES shared root file system in the inventory."

- name: check | Check if mount point defined for cesSharedRoot file system
  assert:
   that:
   - scale_protocols.mountpoint is defined
   - scale_protocols.mountpoint|length > 0
   fail_msg: "Installer did not find the file system mount point point to be used for CES (protocols) shared root.
Please define the CES shared root file system mount point in the inventory."

- block:
  - name: check | Check if ces export ips are defined
    assert:
     that:
     - item.export_ip_pool is defined
     - item.export_ip_pool|length > 0
     fail_msg: "CES export ip pool is not defined or empty for group {{ item.group_name }}"
    with_items:
    - "{{ scale_protocols.scale_ces_groups }}"

  - name: check | Check if export ips are duplicated
    assert:
     that:
     - item.export_ip_pool|length == item.export_ip_pool|unique|length
     fail_msg: "Duplicate ips found in export ip pool for group {{ item.group_name }}"
    with_items:
    - "{{ scale_protocols.scale_ces_groups }}"
  when: scale_protocols.export_ip_pool is defined

- block:
  - name: check | Check if ces export ips are defined
    assert:
     that:
     - scale_protocols.export_ip_pool is defined
     - scale_protocols.export_ip_pool|length > 0
     fail_msg: "CES export ip pool is not defined or empty"
    run_once: true

  - name: check | Collect unique export ips
    set_fact:
     scale_export_ip: "{{ scale_protocols.export_ip_pool|unique }}"
    run_once: true

  - name: check | Check if export ips are duplicated
    assert:
     that:
     - scale_protocols.export_ip_pool|length == scale_export_ip|length
     fail_msg: "Duplicate ips found in export ip pool"
    run_once: true
  when: scale_protocols.export_ip_pool is defined

- block:
  - name: check | Check if CES export node ips map is defined
    assert:
     that:
     - scale_protocols.export_node_ip_map is defined
     - scale_protocols.export_node_ip_map|length > 0
     fail_msg: "CES export ip pool map is not defined or empty"
    run_once: true

  - name: check | Collect unique export ips
    set_fact:
     scale_export_ip: "{{ scale_protocols.export_node_ip_map|unique }}"
    run_once: true

  - name: check | Check if export ips are duplicated
    assert:
     that:
     - scale_protocols.export_node_ip_map|length == scale_export_ip|length
     fail_msg: "Duplicate ips found in export ip pool"
    run_once: true
  when: scale_protocols.export_node_ip_map is defined

- name: check | Get list of GPFS nodes which are not reporting active state
  shell:
   cmd: "{{ scale_command_path }}mmgetstate|grep active"
  register: inactive_nodes
  ignore_errors: true
  failed_when: false

- name: check | Check if any nodes are inactive
  assert:
   that:
   - inactive_nodes.rc == 0
   fail_msg: "GPFS is not active on: {{ ansible_hostname }}. Ensure GPFS is active on all nodes before continuing with the install toolkit"

- name: check | Check if ccr is enabled
  shell:
   cmd: "{{ scale_command_path }}mmlscluster|grep CCR"
  register: ccr_status
  failed_when: false

- name: check | Check if ccr is enabled
  assert:
   that:
   - ccr_status.rc == 0
   fail_msg: "CCR is not enabled on the cluster. CCR must be enabled to install protocols"

  when: scale_protocols.export_ip_pool is defined or scale_protocols.export_node_ip_map is defined

- block:
  - name: check | Extract ip list
    set_fact:
     scale_ces_export_ip: "{{ scale_ces_export_ip + [ item.export_ip_pool ] }}"
    with_items:
    - "{{ scale_protocols.scale_ces_groups }}"

  - name: check | Prepare CES ip list
    set_fact:
     scale_export_ip: "{{ scale_ces_export_ip|flatten }}"

  - name: check | Prepare IPv6 export ip list
    set_fact:
     scale_ces_ipv6_list: "{{ scale_ces_ipv6_list + [ item ]}}"
    when: item is regex ( scale_ipv6_regex )
    with_items:
    - "{{ scale_export_ip }}"

  - name: check | Prepare IPv4 export ip list
    set_fact:
     scale_ces_ipv4_list: "{{ scale_ces_ipv4_list + [ item ]}}"
    when: item is regex ( scale_ipv4_regex )
    with_items:
    - "{{ scale_export_ip }}"

  - name: check | Check if interface is defined
    assert:
     that:
     - scale_protocols.interface|length > 0
    when: scale_ces_ipv6_list|length > 0

  - name: check | Check if all ces ips are either IPv4 or IPv6
    debug:
     msg: "Mixed IPs detected. All CES export IPs can be either IPv4 or IPv6."
    when: scale_ces_ipv4_list|length >0 and scale_ces_ipv6_list|length > 0
    failed_when: scale_ces_ipv4_list|length >0 and scale_ces_ipv6_list|length > 0

  when: scale_protocols.scale_ces_groups is defined and scale_protocols.scale_ces_groups|length > 0 and scale_protocols.export_ip_pool is defined and scale_protocols.export_node_ip_map is not defined

- block:
  - name: check | Prepare IPv6 export ip list
    set_fact:
     scale_ces_ipv6_list: "{{ scale_ces_ipv6_list + [ item ]}}"
    when: item is regex ( scale_ipv6_regex )
    with_items:
    - "{{ scale_protocols.export_ip_pool }}"

  - name: check | Prepare IPv4 export ip list
    set_fact:
     scale_ces_ipv4_list: "{{ scale_ces_ipv4_list + [ item ]}}"
    when: item is regex ( scale_ipv4_regex )
    with_items:
    - "{{ scale_protocols.export_ip_pool }}"

  - name: check | Check if interface is defined
    assert:
     that:
     - scale_protocols.interface|length > 0
    when: scale_ces_ipv6_list|length > 0

  - name: check | Check if all ces ips are either IPv4 or IPv6
    debug:
     msg: "Mixed IPs detected. All CES export IPs can be either IPv4 or IPv6."
    when: scale_ces_ipv4_list|length >0 and scale_ces_ipv6_list|length > 0
    failed_when: scale_ces_ipv4_list|length >0 and scale_ces_ipv6_list|length > 0

  when: scale_protocols.scale_ces_groups is not defined and scale_protocols.export_ip_pool is defined and scale_protocols.export_node_ip_map is not defined 