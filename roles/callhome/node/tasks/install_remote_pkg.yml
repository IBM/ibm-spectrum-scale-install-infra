---
# Remote package installation method

- name: install | Stat remote installation package
  stat:
    path: "{{ scale_install_remotepkg_path }}"
  register: scale_install_remotepkg

- name: install | Check remote installation package
  assert:
    that: scale_install_remotepkg.stat.exists
    msg: >-
      Please set the variable 'scale_install_remotepkg_path' to point to the
      remote installation package (accessible on Ansible managed node)!

#
# Optionally, verify package checksum
#
- name: install | Stat checksum file
  stat:
    path: "{{ scale_install_remotepkg_path }}.md5"
  register: scale_install_md5_file

- block:  ## when: scale_install_md5_file.stat.exists
    - name: install | Read checksum from file
      slurp:
        src: "{{ scale_install_remotepkg_path }}.md5"
      register: scale_install_md5_sum

    - name: install | Compare checksums
      vars:
        md5sum: "{{ scale_install_md5_sum.content | b64decode }}"
      assert:
        that: md5sum.strip().split().0 == scale_install_remotepkg.stat.md5
        msg: >-
          Checksums don't match. Please check integritiy of your remote
          installation package!
  when: scale_install_md5_file.stat.exists

#
# Extract installation package
#
- name: install | Stat extracted packages
  stat:
    path: "{{ callhome_extracted_path }}"
  register: scale_install_gpfs__rpmdir

- name: install | Make installation package executable
  file:
    path: "{{ scale_install_remotepkg_path }}"
    mode: a+x
  when: not scale_install_gpfs_rpmdir.stat.exists

- name: install | Extract installation package
  command: "{{ scale_install_remotepkg_path + ' --silent' }}"
  args:
    creates: "{{ callhome_extracted_path }}"

- name: install | Stat extracted packages
  stat:
    path: "{{ callhome_extracted_path }}"
  register: scale_install_gpfs__rpmdir

- name: install | Check extracted packages
  assert:
    that:
      - scale_install_gpfs__rpmdir.stat.exists
      - scale_install_gpfs_rpmdir.stat.isdir
    msg: >-
      The variable 'scale_version' doesn't seem to match the contents of the
      remote installation package!

- name: install | callhome path
  set_fact:
   callhome_url: 'gpfs_rpms/'
   #
   # find gpfs.java package and add to rpm list
   #
- block:
  - name: install | Find gpfs.java (gpfs.java) RPM
    find:
     paths: "{{ callhome_extracted_path }}"
     patterns: gpfs.java-*.rpm
     # use_regex: yes
    register: scale_install_gpfs_java

  - name: install | Check valid GPFS (gpfs.java) RPM
    assert:
     that: scale_install_gpfs_java.matched > 0
     msg: "No GPFS java (gpfs.java) RPM found: {{ callhome_extracted_path }}gpfs.java*.rpm"

  - name: install | Add GPFS java RPM to list
    vars:
     current_rpm: "{{ callhome_extracted_path }}/{{ item }}.rpm"
    set_fact:
     scale_install_all_rpms: "{{ scale_install_all_rpms + [ current_rpm ] }}"
    with_items:
    - "{{ scale_install_gpfs_java.files.0.path | basename | regex_replace('\\.rpm$', '') }}"


#
# find gpfs.callhomE package and add it to rpm list
#
- block:
  - name: install | Find gpfs.callhome (gpfs.callhome) RPM
    find:
     paths: "{{ callhome_extracted_path }}"
     patterns: gpfs.callhome-ecc-client*.rpm
     # use_regex: yes
    register: scale_install_gpfs_callhome

  - name: install | Check valid GPFS (gpfs.callhome) RPM
    assert:
     that: scale_install_gpfs_callhome.matched > 0
     msg: "No GPFS callhome (gpfs.callhome) RPM found: {{ callhome_extracted_path }}gpfs.callhome-ecc-client-{{ scale_version }}*.rpm"

  - name: install | Add GPFS callhome RPM to list
    vars:
     current_rpm: "{{ callhome_extracted_path }}/{{ item }}.rpm"
    set_fact:
     cale_install_all_rpms: "{{ scale_install_all_rpms + [ current_rpm ] }}"
    with_items:
    - "{{ scale_install_gpfs_callhome.files.0.path | basename | regex_replace('\\.rpm$', '') }}"
