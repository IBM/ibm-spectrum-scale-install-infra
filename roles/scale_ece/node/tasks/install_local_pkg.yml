---
# Local package installation method
- block:  ## run_once: true
  - name: install | Stat local installation package
    stat:
     path: "{{ scale_install_localpkg_path }}"
    register: scale_install_localpkg

  - name: install | Check local installation package
    assert:
     that: scale_install_localpkg.stat.exists
     msg: >-
          Please set the variable 'scale_install_localpkg_path' to point to the
          local installation package (accessible on Ansible control machine)!
#

# Optionally, verify package checksum

#
  - name: install | Stat checksum file
    stat:
     path: "{{ scale_install_localpkg_path }}.md5"
    register: scale_install_md5_file

  - block:  ## when: scale_install_md5_file.stat.exists
    - name: install | Read checksum from file
      set_fact:
       scale_install_md5_sum: "{{ lookup('file', scale_install_localpkg_path + '.md5') }}"

    - name: install | Compare checksums
      assert:
       that: scale_install_md5_sum.strip().split().0 == scale_install_localpkg.stat.md5
       msg: >-
              Checksums don't match. Please check integritiy of your local
              installation package!
    when: scale_install_md5_file.stat.exists
  run_once: true
  delegate_to: localhost
#

# Copy installation package

#

- name: install | Stat extracted packages
  stat:
   path: "{{ gnr_extracted_path }}"
  register: scale_install_gpfs_rpmdir

- block:  ## when: not scale_install_gpfs_rpmdir.stat.exists
  - name: install | Stat temporary directory
    stat:
     path: "{{ scale_install_localpkg_tmpdir_path }}"
    register: scale_install_localpkg_tmpdir

  - name: install | Check temporary directory
    assert:
     that:
     - scale_install_localpkg_tmpdir.stat.exists
     - scale_install_localpkg_tmpdir.stat.isdir
     msg: >-
          Please set the variable 'scale_install_localpkg_tmpdir_path' to point
          to a temporary directory on the remote system!

  - name: install | Copy installation package to node
    copy:
     src: "{{ scale_install_localpkg_path }}"
     dest: "{{ scale_install_localpkg_tmpdir_path }}"
     mode: a+x
  when: not scale_install_gpfs_rpmdir.stat.exists
#

# Extract installation package

#
- name: install | Extract installation package
  vars:
   localpkg: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
  command: "{{ localpkg + ' --silent' }}"
  args:
   creates: "{{ gnr_extracted_path }}"

- name: install | Stat extracted packages
  stat:
   path: "{{ gnr_extracted_path }}"
  register: scale_install_gpfs_rpmdir

- name: install | Check extracted packages
  assert:
   that:
   - scale_install_gpfs_rpmdir.stat.exists
   - scale_install_gpfs_rpmdir.stat.isdir
   msg: >-
      The variable 'scale_version' doesn't seem to match the contents of the
      local installation package!
#

# Delete installation package

#
- name: install | Delete installation package from node
  file:
   path: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
   state: absent

- name: install | gnr path
  set_fact:
   scale_gnr_url: 'gpfs_rpms/'
  when: ansible_distribution in scale_rhel_distribution

#

# Find gnr rpms

- block:  ## when: host is defined as a protocol node

  - name: install | Find gpfs.gnr (gpfs.gnr) package
    find:
     paths:  "{{ gnr_extracted_path }}/{{ scale_gnr_url }}"
     patterns: gpfs.gnr*
    register: scale_install_gpfs_gnr

  - name: install | Check valid GPFS (gpfs.gnr) package
    assert:
     that: scale_install_gpfs_gnr.matched > 0
     msg: "No GPFS gnr (gpfs.gnr) package found {{ gnr_extracted_path }}/{{ scale_gnr_url }}gpfs.gnr*"

  - name: install | Add GPFS gnr package to list
    vars:
     current_package:  "{{ item.path }}"
    set_fact:
     scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
    with_items:
    - "{{ scale_install_gpfs_gnr.files }}"
