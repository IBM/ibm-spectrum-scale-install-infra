---
- name: Set basedomain and rootdomain
  set_fact:
    basedomain: "{{ BASE_DN.split('.')[0] }}"
    rootdomain: "{{ BASE_DN.split('.')[1] }}"

- name: Debug basedomain and rootdomain values
  debug:
    msg:
      - "Basedomain: {{ basedomain }}"
      - "Rootdomain: {{ rootdomain }}"

- name: Install required software
  apt:
    name:
      - gnutls-bin
      - ssl-cert
      - nfs-common
    update_cache: yes
  register: install_software

- name: Log software installation
  lineinfile:
    path: "{{ LOGFILE }}"
    line: "Installed pre-required software"
  when: install_software.changed

- name: Set slapd root password for non-interactive installation
  debconf:
    name: slapd
    question: "{{ item.question }}"
    value: "{{ LDAP_ADMIN_PASSWORD }}"
    vtype: password
  loop:
    - { question: 'slapd/root_password' }
    - { question: 'slapd/root_password_again' }

- name: Install slapd and ldap-utils
  apt:
    name:
      - slapd
      - ldap-utils
    state: present
    update_cache: yes
  environment:
    DEBIAN_FRONTEND: non-interactive

- name: Set debconf selections for OpenLDAP configuration
  debconf:
    name: slapd
    question: "{{ item.question }}"
    value: "{{ item.value }}"
    vtype: "{{ item.vtype }}"
  loop:
    - { question: 'slapd/internal/adminpw', value: "{{ LDAP_ADMIN_PASSWORD }}", vtype: "password" }
    - { question: 'slapd/internal/generated_adminpw', value: "{{ LDAP_ADMIN_PASSWORD }}", vtype: "password" }
    - { question: 'slapd/password2', value: "{{ LDAP_ADMIN_PASSWORD }}", vtype: "password" }
    - { question: 'slapd/password1', value: "{{ LDAP_ADMIN_PASSWORD }}", vtype: "password" }
    - { question: 'slapd/domain', value: "{{ BASE_DN }}", vtype: "string" }
    - { question: 'shared/organization', value: "{{ BASE_DN }}", vtype: "string" }
    - { question: 'slapd/purge_database', value: "false", vtype: "boolean" }
    - { question: 'slapd/move_old_database', value: "true", vtype: "boolean" }
    - { question: 'slapd/no_configuration', value: "false", vtype: "boolean" }

- name: Reconfigure slapd
  command: dpkg-reconfigure slapd
  environment:
    DEBIAN_FRONTEND: non-interactive

- name: Update LDAP configuration with base and URI
  blockinfile:
    path: /etc/ldap/ldap.conf
    block: |
      BASE   dc={{ basedomain }},dc={{ rootdomain }}
      URI    ldap://localhost
  when:
    - basedomain is defined
    - rootdomain is defined

- name: Restart slapd service
  service:
    name: slapd
    state: restarted
  register: slapd_service

- name: Log OpenLDAP service start
  lineinfile:
    path: "{{ LOGFILE }}"
    line: "Started OpenLDAP service"
  when: slapd_service.changed

- name: Log SSL certificate generation
  lineinfile:
    path: "{{ LOGFILE }}"
    line: "Creating SSL certificate"

- name: Generate SSL private key for OpenLDAP
  command: certtool --generate-privkey --sec-param High --outfile /etc/ssl/private/ldap_cakey.pem
  args:
    creates: /etc/ssl/private/ldap_cakey.pem

- name: Create CA template file
  copy:
    dest: /etc/ssl/ca.info
    content: |
      cn =  "{{ ldap_cluster_prefix }}-ldapserver"
      ca
      cert_signing_key
      expiration_days = 3650

- name: Generate self-signed CA certificate
  command: >
    certtool --generate-self-signed
    --load-privkey /etc/ssl/private/ldap_cakey.pem
    --template /etc/ssl/ca.info
    --outfile /usr/local/share/ca-certificates/ldap_cacert.pem
  args:
    creates: /usr/local/share/ca-certificates/ldap_cacert.pem

- name: Update CA certificates
  command: update-ca-certificates
  become: yes

- name: Copy CA certificate to /etc/ssl/certs
  copy:
    src: /usr/local/share/ca-certificates/ldap_cacert.pem
    dest: /etc/ssl/certs/
    owner: root
    group: root
    mode: '0644'
    remote_src: yes

- name: Generate private key for LDAP server
  command: certtool --generate-privkey --sec-param High --outfile /etc/ssl/private/ldapserver_slapd_key.pem
  args:
    creates: /etc/ssl/private/ldapserver_slapd_key.pem
  register: ldap_key_generated

- name: Create LDAP server certificate info file
  copy:
    dest: /etc/ssl/ldapserver.info
    content: |
      organization = "{{ ldap_cluster_prefix }}-ldapserver"
      cn = localhost
      tls_www_server
      encryption_key
      signing_key
      expiration_days = 3650
  register: ldap_cert_info_created

- name: Log LDAP server certificate generation
  lineinfile:
    path: "{{ LOGFILE }}"
    line: "Generated a private key and certificate for the LDAP server"
  when: ldap_key_generated.changed and ldap_cert_info_created.changed

- name: Generate LDAP server certificate signed by CA
  command: >
    certtool --generate-certificate
    --load-privkey /etc/ssl/private/ldapserver_slapd_key.pem
    --load-ca-certificate /etc/ssl/certs/ldap_cacert.pem
    --load-ca-privkey /etc/ssl/private/ldap_cakey.pem
    --template /etc/ssl/ldapserver.info
    --outfile /etc/ssl/certs/ldapserver_slapd_cert.pem
  args:
    creates: /etc/ssl/certs/ldapserver_slapd_cert.pem
  register: ldap_cert_generated

- name: Log LDAP server certificate generation
  lineinfile:
    path: "{{ LOGFILE }}"
    line: "Generated a certificate for the LDAP server signed by the CA"
  when: ldap_cert_generated.changed

- name: Change group ownership to openldap
  command: chgrp openldap /etc/ssl/private/ldapserver_slapd_key.pem
  become: yes

- name: Set the file permissions to 0640
  file:
    path: /etc/ssl/private/ldapserver_slapd_key.pem
    mode: '0640'
    owner: root
    group: openldap
  become: yes

- name: Log the TLS configuration application
  lineinfile:
    path: "{{ LOGFILE }}"
    line: "Applied TLS configuration"
  become: yes

- name: Change group ownership to openldap
  ansible.builtin.command:
    cmd: chgrp openldap /etc/ssl/private/ldapserver_slapd_key.pem
  become: yes
  register: change_group_ownership

- name: Set file permissions to 0640
  ansible.builtin.file:
    path: /etc/ssl/private/ldapserver_slapd_key.pem
    mode: '0640'
    owner: root
    group: openldap
  become: yes
  register: set_permissions

- name: Add openldap user to ssl-cert group
  ansible.builtin.command:
    cmd: gpasswd -a openldap ssl-cert
  become: yes
  register: add_user_to_group

- name: Log TLS configuration application
  ansible.builtin.lineinfile:
    path: "{{ LOGFILE }}"
    line: "Applied TLS configuration"
  when: LOGFILE is defined
  become: yes
  when: change_group_ownership.changed or set_permissions.changed or add_user_to_group.changed

- name: Restart slapd service
  ansible.builtin.service:
    name: slapd
    state: restarted
  become: yes
  register: slapd_service_restart

- name: Log OpenLDAP service restart
  ansible.builtin.lineinfile:
    path: "{{ LOGFILE }}"
    line: "Restarted the OpenLDAP service"
  when: slapd_service_restart.changed
  become: yes

- name: Create LDIF file for TLS configuration
  ansible.builtin.command: >
    echo "dn: cn=config\n
    add: olcTLSCACertificateFile\n
    olcTLSCACertificateFile: /etc/ssl/certs/ldap_cacert.pem\n
    -\n
    add: olcTLSCertificateFile\n
    olcTLSCertificateFile: /etc/ssl/certs/ldapserver_slapd_cert.pem\n
    -\n
    add: olcTLSCertificateKeyFile\n
    olcTLSCertificateKeyFile: /etc/ssl/private/ldapserver_slapd_key.pem" >
    /etc/ssl/certinfo.ldif
  become: yes

- name: Ensure certinfo.ldif file exists
  ansible.builtin.file:
    path: /etc/ssl/certinfo.ldif
    state: touch
  become: yes

- name: Check if certinfo.ldif exists
  ansible.builtin.stat:
    path: /etc/ssl/certinfo.ldif
  register: certinfo_ldif

- name: Apply TLS configuration to OpenLDAP if certinfo.ldif exists
  ansible.builtin.command: >
    ldapmodify -Y EXTERNAL -H ldapi:/// -f /etc/ssl/certinfo.ldif
  become: yes
  when: certinfo_ldif.stat.exists
  register: tls_config_applied

- name: Enable ldaps service in OpenLDAP configuration
  ansible.builtin.command: >
    sed -i 's|SLAPD_SERVICES="ldap:/// ldapi:///"|SLAPD_SERVICES="ldap:/// ldapi:/// ldaps:///"|g' /etc/default/slapd
  become: yes
  register: ldaps_service_enabled

- name: Log OpenLDAP TLS configuration
  ansible.builtin.command: >
    echo "Configured OpenLDAP to use TLS" >> {{ LOGFILE }}
  become: yes
  when: tls_config_applied.changed and ldaps_service_enabled.changed and LOGFILE is defined

- name: Update LDAP client configuration with TLS settings
  ansible.builtin.command: >
    echo -e "TLS_CACERT /etc/ssl/certs/ldap_cacert.pem\nTLS_REQCERT allow" >> /etc/ldap/ldap.conf
  become: yes

- name: Restart OpenLDAP service
  ansible.builtin.service:
    name: slapd
    state: restarted
  become: yes
  register: restart_openldap_service

- name: Log SSL creation completion
  ansible.builtin.command: >
    echo "SSL creation completed" >> {{ LOGFILE }}
  become: yes
  when: restart_openldap_service.changed

# Creating LDAP directory to store the LDIF files.

- name: LDAP | LDAP Directory | Creation 
  file:
    path: "{{ LDAP_DIR }}"
    state: directory
  register: create_dir_output
  run_once: true
