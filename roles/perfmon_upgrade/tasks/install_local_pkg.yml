---
# Local package installation method

- block:  ## run_once: true
    - name: upgrade | Stat local installation package
      stat:
        path: "{{ scale_install_localpkg_path }}"
        checksum_algorithm: md5
      register: scale_install_localpkg

    - name: upgrade | Check local installation package
      assert:
        that: scale_install_localpkg.stat.exists
        msg: >-
          Please set the variable 'scale_install_localpkg_path' to point to the
          local installation package (accessible on Ansible control machine)!
#
# Optionally, verify package checksum
#
    - name: upgrade | Stat checksum file
      stat:
        path: "{{ scale_install_localpkg_path }}.md5"
      register: scale_install_md5_file

    - block:  ## when: scale_install_md5_file.stat.exists
        - name: upgrade | Read checksum from file
          set_fact:
            scale_install_md5_sum: "{{ lookup('file', scale_install_localpkg_path + '.md5') }}"

        - name: upgrade | Compare checksums
          assert:
            that: scale_install_md5_sum.strip().split().0 == scale_install_localpkg.stat.checksum
            msg: >-
              Checksums don't match. Please check integritiy of your local
              installation package!
      when: scale_install_md5_file.stat.exists
  run_once: true
  delegate_to: localhost

#
# Copy installation package
#
- name: upgrade | Stat extracted packages
  stat:
    path: "{{ scale_gpfs_path_url }}"
  register: scale_install_gpfs_packagedir

- block:  ## when: not scale_install_gpfs_packagedir.stat.exists
    - name: upgrade | Stat temporary directory
      stat:
        path: "{{ scale_install_localpkg_tmpdir_path }}"
      register: scale_install_localpkg_tmpdir

    - name: upgrade | Check temporary directory
      assert:
        that:
          - scale_install_localpkg_tmpdir.stat.exists
          - scale_install_localpkg_tmpdir.stat.isdir
        msg: >-
          Please set the variable 'scale_install_localpkg_tmpdir_path' to point
          to a temporary directory on the remote system!
    - name: upgrade | Copy installation package to node
      copy:
        src: "{{ scale_install_localpkg_path }}"
        dest: "{{ scale_install_localpkg_tmpdir_path }}"
        mode: a+x
  when: not scale_install_gpfs_packagedir.stat.exists

#
# Extract installation package
#
- name: upgrade | Extract installation package
  vars:
    localpkg: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
  command: "{{ localpkg + ' --silent' }}"
  args:
    creates: "{{ scale_gpfs_path_url }}"

- name: upgrade | Stat extracted packages
  stat:
    path: "{{ scale_gpfs_path_url }}"
  register: scale_install_gpfs_packagedir

- name: upgrade | Check extracted packages
  assert:
    that:
      - scale_install_gpfs_packagedir.stat.exists
      - scale_install_gpfs_packagedir.stat.isdir
    msg: >-
      The variable 'scale_version' doesn't seem to match the contents of the
      local installation package!
#
# Delete installation package
#
- name: upgrade | Delete installation package from node
  file:
    path: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
    state: absent

- name: upgrade | Set package arch
  set_fact:
    package_arch: 'el'

- name: upgrade | Set package arch
  set_fact:
    package_arch: 'U'
  when: ansible_distribution in scale_ubuntu_distribution

- name: upgrade | Set package arch
  set_fact:
    package_arch: 'sles'
  when: ansible_distribution in scale_sles_distribution

- name: upgrade | zimon path
  set_fact:
    scale_zimon_url: 'zimon_rpms/rhel7/'
  when: ansible_distribution in scale_rhel_distribution and ansible_distribution_major_version == '7'

- name: upgrade | zimon path
  set_fact:
    scale_zimon_url: 'zimon_rpms/rhel8/'
  when: ansible_distribution in scale_rhel_distribution and ansible_distribution_major_version == '8'

- name: upgrade | zimon path
  set_fact:
    scale_zimon_url: 'zimon_debs/ubuntu/ubuntu16/'
  when: ansible_distribution in scale_ubuntu_distribution and ansible_distribution_major_version == '16'

- name: upgrade | zimon path
  set_fact:
    scale_zimon_url: 'zimon_debs/ubuntu/ubuntu18/'
  when: ansible_distribution in scale_ubuntu_distribution and ansible_distribution_major_version == '18'

- name: upgrade | zimon path
  set_fact:
    scale_zimon_url: 'zimon_debs/ubuntu/'
  when: ansible_distribution in scale_ubuntu_distribution and ansible_distribution_major_version == '20'

- name: upgrade | zimon path
  set_fact:
    scale_zimon_url: 'zimon_debs/ubuntu/ubuntu22/'
  when: ansible_distribution in scale_ubuntu_distribution and ansible_distribution_major_version == '22'

- name: upgrade | zimon path
  set_fact:
    scale_zimon_url: 'zimon_debs/ubuntu/ubuntu24/'
  when: ansible_distribution in scale_ubuntu_distribution and ansible_distribution_major_version == '24'

- name: upgrade | zimon path
  set_fact:
    scale_zimon_url: 'zimon_rpms/sles12/'
  when: ansible_distribution in scale_sles_distribution and ansible_distribution_major_version == '12'

- name: upgrade | zimon path
  set_fact:
    scale_zimon_url: 'zimon_rpms/sles15/'
  when: ansible_distribution in scale_sles_distribution and ansible_distribution_major_version == '15'

#
# Find Zimon collector
#
- block:  ## when: host is defined as a gui node
    #
    # Find GPFS gpfs.collector
    #
    - name: upgrade | Find gpfs.collector (gpfs.collector) RPM
      find:
        paths: "{{ scale_extracted_path }}/{{ scale_zimon_url }}"
        patterns: gpfs.gss.pmcollector*{{ package_arch }}{{ ansible_distribution_major_version }}*
      register: scale_install_gpfs_collector

    - name: upgrade | Check valid GPFS (gpfs.collector) RPM
      assert:
        that: scale_install_gpfs_collector.matched > 0
        msg: >-
          No GPFS collector (gpfs.gss.collector) RPM found:
          "{{ scale_extracted_path }}/{{ scale_zimon_url }}/gpfs.gss.pmcollector*{{ package_arch }}{{ ansible_distribution_major_version }}*"

    - name: upgrade | Add GPFS zimon collector packages to list
      vars:
        current_package: "{{ scale_extracted_path }}/{{ scale_zimon_url }}/{{ item }}"
      set_fact:
        scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
      with_items:
        - "{{ scale_install_gpfs_collector.files.0.path | basename }}"

#
# Find GPFS gpfs.gss.pmsensors
#
- name: upgrade | Find gpfs.gss.pmsensors (gpfs.gss.pmsensors) RPM
  find:
    paths: "{{ scale_extracted_path }}/{{ scale_zimon_url }}"
    patterns: gpfs.gss.pmsensors*{{ package_arch }}{{ ansible_distribution_major_version }}*
  register: scale_install_gpfs_pmsensors

- name: upgrade | Check valid GPFS (gpfs.gss.pmsensors) RPM
  assert:
    that: scale_install_gpfs_pmsensors.matched > 0
    msg: >-
      No GPFS pmsensors (gpfs.gss.pmsensors) RPM found:
      "{{ scale_extracted_path }}/{{ scale_zimon_url }}/gpfs.gss.pmsensors*{{ package_arch }}{{ ansible_distribution_major_version }}*"


- name: upgrade | Add GPFS zimon sensors packages to list
  vars:
    current_package: "{{ scale_extracted_path }}/{{ scale_zimon_url }}/{{ item }}"
  set_fact:
    scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
  with_items:
    - "{{ scale_install_gpfs_pmsensors.files.0.path | basename }}"
