---
#
# Get some cluster information
#
- name: Step 1 - Remote Cluster Config
  debug:
    msg: Gather information about Storage and Client clusters
  run_once: True

- name: Storage Cluster (owner) | GET the Cluster Information
  uri:
    validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
    force_basic_auth: yes
    url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_scalemgmt_endpoint }}/cluster
    method: GET
    user: "{{ scale_remotemount_storage_gui_username }}"
    password: "{{ scale_remotemount_storage_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: owning_cluster_info
  run_once: True

- name: scale_remotemount_debug | Storage Cluster | Print the Cluster Information
  debug:
    msg: "{{ owning_cluster_info }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
  run_once: True

- name: Client Cluster (access) | GET the Cluster Information
  uri:
    validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
    force_basic_auth: yes
    url: https://{{ scale_remotemount_client_gui_hostname }}:{{ scale_remotemount_client_cluster_gui_port }}/{{ scale_remotemount_scalemgmt_endpoint }}/cluster
    method: GET
    user: "{{ scale_remotemount_client_gui_username }}"
    password: "{{ scale_remotemount_client_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: access_cluster_info
  run_once: True

- name: scale_remotemount_debug | Client Cluster | Print the Cluster Information
  debug:
    msg: "{{ access_cluster_info }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
  run_once: True

- set_fact:
    access_cluster_name: "{{ access_cluster_info.json.cluster.clusterSummary.clusterName }}"
    owning_cluster_name: "{{ owning_cluster_info.json.cluster.clusterSummary.clusterName }}"
  run_once: True

- name: scale_remotemount_debug | Print out the Storage and Client Cluster Names
  debug:
    msg: "Access: {{ access_cluster_name }} and Owning: {{ owning_cluster_name }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
  run_once: True

#
# When scale_remotemount_forceRun, do some cleanup to properly unmount and remove things
#
- import_tasks: cleanup_filesystems.yml
  when: scale_remotemount_forceRun | bool
  run_once: True

- name: Step 2 - Remote Cluster Config
  debug:
    msg: Check if the Client Cluster and Storage Cluster is already defined
  run_once: True

#
# API call: remoteclusters List the clusters that mount filesystems of an owning cluster remotely.
# This API must be executed on the cluster that owns the filesystems that should be mounted remotely
#
- name: "Storage Cluster (owner) | Check if the Client Cluster ('{{ access_cluster_name }}') is already defined"
  uri:
    validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
    force_basic_auth: yes
    url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_endpoint }}/remoteclusters/{{ access_cluster_name }}
    method: GET
    user: "{{ scale_remotemount_storage_gui_username }}"
    password: "{{ scale_remotemount_storage_gui_password }}"
    body_format: json
    status_code:
      - 200
      - 400
  register: remote_clusters_results
  ignore_errors: true
  run_once: True

#
# TODO: there is no Check if the Storage Cluster (Owner) is already defined on Client Cluster, so in some cases where storage cluster have connection to client cluster (mmauth) but the client cluster don't have, the playbook will fail
# as the owningcluster is in a array, we need to loop over or make list of the array to be able to use when:
#
- name: Client Cluster (access) | List the remote cluster already defined
  uri:
    validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
    force_basic_auth: true
    url: https://{{ scale_remotemount_client_gui_hostname }}:{{ scale_remotemount_client_cluster_gui_port }}/{{ scale_remotemount_endpoint }}/owningclusters
    method: GET
    user: "{{ scale_remotemount_client_gui_username }}"
    password: "{{ scale_remotemount_client_gui_password }}"
  register: client_remote_clusters_result
  run_once: True

- name: Client Cluster (access) | scale_remotemount_debug | Print out the remote clusters
  debug:
    msg: "{{ client_remote_clusters_result.json.owningClusters }}"
  run_once: True
  loop: "{{ client_remote_clusters_result.json.owningClusters }}"
  when:
     - item.owningCluster == owning_cluster_name
     - scale_remotemount_debug is defined
     - scale_remotemount_debug | bool

# The remote_clusters_results is in an array, so looping here incase there are multiple remote clusters
# We want to delete the one where the owningCluster name matches what we are trying to do a remote mount on
- name: Client Cluster (access) | Delete the clusters on a loop...
  include_tasks: delete_remote_cluster.yml
  when:
     - item.owningCluster == owning_cluster_name
     - scale_remotemount_forceRun | bool
  loop: "{{ client_remote_clusters_result.json.owningClusters }}"
  run_once: True

- name: Storage Cluster (owner) | Delete the Client Cluster, if it exists
  block:
    - name: "DELETE: {{ scale_remotemount_endpoint }}/remoteclusters/{{ access_cluster_name }}"
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_endpoint }}/remoteclusters/{{ access_cluster_name }}
        method: DELETE
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        status_code:
          - 202
      register: delete_call

    - name: "Checking results from the job: {{ delete_call.json.jobs[0].jobId }}"
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_scalemgmt_endpoint }}/jobs/{{ delete_call.json.jobs[0].jobId }}
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
      register: completed_check
      until: completed_check.json.jobs[0].status == "COMPLETED"
      retries: "{{ scale_remotemount_restapi_retries_count }}"
      delay: "{{ scale_remotemount_restapi_retries_delay }}"
  when: not remote_clusters_results.failed and scale_remotemount_forceRun | bool
  run_once: True

- name: Remote Cluster Config | Exchange the keys between Storage and Client Clusters
  block:
    - name: Step 3 - Remote Cluster Config
      debug:
        msg: "Exchange the keys between Storage and Client Clusters"
      run_once: True

    - name: Client Cluster (access) | Get the Public Key
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_client_gui_hostname }}:{{ scale_remotemount_client_cluster_gui_port }}/{{ scale_remotemount_endpoint }}/authenticationkey
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: json
        status_code:
          - 200
      register: accesskey_result
      run_once: True

    - name: scale_remotemount_debug | Print out the Client Cluster (access) Public Key results
      debug:
        var: accesskey_result
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
      run_once: True

    - name: Storage Cluster (owner) | Send the Public Key of the Client Cluster (access)
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_endpoint }}/remoteclusters
        method: POST
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: json
        body: |
          {
            "remoteCluster": "{{ access_cluster_name }}",
            "ciphers": ["{{ scale_remotemount_remotecluster_chipers }}"],
            "key": {{ accesskey_result.json.key | trim | replace(", ", ",") }}
          }
        status_code:
          - 202
      register: send_key
      run_once: True

    - name: "Storage Cluster (owner) | Check the result of adding the Client Cluster {{ send_key.json.jobs[0].jobId }}"
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_scalemgmt_endpoint }}/jobs/{{ send_key.json.jobs[0].jobId }}
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
      register: completed_check
      until: completed_check.json.jobs[0].status != "FAILED"
      retries: "{{ scale_remotemount_restapi_retries_count }}"
      delay: "{{ scale_remotemount_restapi_retries_delay }}"
      run_once: True

    #
    # Send the Storage Cluster Key to the Client Cluster
    #

    - name: Storage Cluster (owner) | Get the Public Key
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_endpoint }}/authenticationkey
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: json
        status_code:
          - 200
      register: owningkey_result
      run_once: True

    - name: scale_remotemount_debug | Print out the Storage Cluster (owning) Public Key results
      debug:
        var: owningkey_result
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
      run_once: True

    - name: Step 4 - Remote Cluster Config
      debug:
        msg: "Add the storage cluster (mmremotecluster add) on Client Cluster"
      run_once: True

    - name: Client Cluster (access) | List the remote cluster already defined
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_client_gui_hostname }}:{{ scale_remotemount_client_cluster_gui_port }}/{{ scale_remotemount_endpoint }}/owningclusters
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
      register: remote_clusters_result
      run_once: True

    - name: scale_remotemount_debug | Print out the remote clusters
      debug:
        msg: "{{ remote_clusters_result.json }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
      run_once: True

#
# After a feature improvement we want to grab adminnodename and deamonnode name after where we want the remote mount traffic going over.
#
# This section is to gather the nodenames and adminNodeName
#
    - name: "Storage Cluster (owning) | GET AdminNodeNames Info - GET {{ scale_remotemount_scalemgmt_endpoint }}/nodes"
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_scalemgmt_endpoint }}/nodes{{ scale_remotemount_storage_contactnodes_filter }}
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: json
        status_code:
          - 200
      register: owning_cluster_nodes
      run_once: True

    - set_fact:
        owning_nodes_name: []
      run_once: True

    - set_fact:
          owning_nodes_name: "{{ owning_nodes_name + [item.adminNodeName] }}"
      with_items: "{{ owning_cluster_nodes.json.nodes }}"
      run_once: True
  
    - debug:
        msg: "{{owning_nodes_name}}"

#
# This Section is when using daemonNodeName
#
    - name: "Storage Cluster (owner) | GET daemonNodeName Info - GET {{ scale_remotemount_scalemgmt_endpoint }}/nodes/"
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_scalemgmt_endpoint }}/nodes/{{item}}
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: owning_cluster_daemonnodes
      with_items: "{{ owning_nodes_name }}"
      run_once: True

    - set_fact:
        owning_daemon_nodes_name: []
      run_once: True

    - set_fact:
        owning_daemon_nodes_name: "{{ owning_daemon_nodes_name + [item.json.nodes.0.network.daemonNodeName] }}"
      with_items: "{{ owning_cluster_daemonnodes.results }}"
      run_once: True

#
# adminNodeName section
#
    - name: scale_remotemount_debug | Print out the array storing the adminNodeNames from the Storage Cluster (owning)
      debug:
        msg: "{{ owning_nodes_name }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
      run_once: True

    - name: Client Cluster (access) | Add Storage Cluster as a Remote Cluster with adminNodeName
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_client_gui_hostname }}:{{ scale_remotemount_client_cluster_gui_port }}/{{ scale_remotemount_endpoint }}/owningclusters
        method: POST
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: json
        body: |
          {
            "owningCluster": "{{ owning_cluster_name }}",
            "key": {{ owningkey_result.json.key | trim | replace(", ", ",") }},
            "contactNodes": {{ owning_nodes_name }}
          }
        status_code:
          - 202
      register: adminnode_uri_result
      run_once: True
      when: scale_remotemount_storage_adminnodename is defined and scale_remotemount_storage_adminnodename | bool

    - name: "Client Cluster (access) | Check the result of adding the remote Storage Cluster with adminNodeName (JOB: {{ adminnode_uri_result.json.jobs[0].jobId }})"
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_client_gui_hostname }}:{{ scale_remotemount_client_cluster_gui_port }}/{{ scale_remotemount_scalemgmt_endpoint }}/jobs/{{ adminnode_uri_result.json.jobs[0].jobId }}
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
      register: completed_check
      until: completed_check.json.jobs[0].status == "COMPLETED"
      retries: "{{ scale_remotemount_restapi_retries_count }}"
      delay: "{{ scale_remotemount_restapi_retries_delay }}"
      run_once: True
      when: scale_remotemount_storage_adminnodename is defined and scale_remotemount_storage_adminnodename | bool
#
# deamonNodeName section
#
    - name: scale_remotemount_debug | Print out the array storing the DeamonNodeNames from the Storage Cluster (owning)
      debug:
        msg: "{{ owning_daemon_nodes_name }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
      run_once: True

    - name: Client Cluster (access) | Add Storage Cluster as a Remote Cluster with DeamonNodeName
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_client_gui_hostname }}:{{ scale_remotemount_client_cluster_gui_port }}/{{ scale_remotemount_endpoint }}/owningclusters
        method: POST
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: json
        body: |
          {
            "owningCluster": "{{ owning_cluster_name }}",
            "key": {{ owningkey_result.json.key | trim | replace(", ", ",") }},
            "contactNodes": {{ owning_daemon_nodes_name }}
          }
        status_code:
          - 202
      register: daemonnodesname_uri_result
      run_once: True
      when: not scale_remotemount_storage_adminnodename

    - name: "Client Cluster (access) | Check the result of adding the remote Storage Cluster with DeamonNodeName (JOB: {{ daemonnodesname_uri_result.json.jobs[0].jobId }})"
      uri:
        validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_client_gui_hostname }}:{{ scale_remotemount_client_cluster_gui_port }}/{{ scale_remotemount_scalemgmt_endpoint }}/jobs/{{ daemonnodesname_uri_result.json.jobs[0].jobId }}
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
      register: completed_check
      until: completed_check.json.jobs[0].status == "COMPLETED"
      retries: "{{ scale_remotemount_restapi_retries_count }}"
      delay: "{{ scale_remotemount_restapi_retries_delay }}"
      run_once: True
      when: not scale_remotemount_storage_adminnodename
  when:
    - (remote_clusters_results.status == 400) or (scale_remotemount_forceRun | bool)

- name: Step 5 - Configure and Mount filesystems
  debug:
    msg: "On Storage Cluster, Check if filesystems is already accessible for Client Cluster"
  run_once: True

- name: "Mount Filesystem | Storage Cluster (owner) | Check if filesystems is already accessible for Client Cluster  ('{{ access_cluster_name }}')"
  uri:
    validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
    force_basic_auth: yes
    url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_endpoint }}/remoteclusters/{{ access_cluster_name }}
    method: GET
    user: "{{ scale_remotemount_storage_gui_username }}"
    password: "{{ scale_remotemount_storage_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: remote_clusters_results
  ignore_errors: true
  run_once: True


- name: "Mount Filesystem | Storage Cluster (owner) | Check if filesystems is accessible on Client Cluster ('{{ access_cluster_name }}') - Debug"
  run_once: True
  debug:
    msg: "{{ remote_clusters_results.json.remoteClusters[0] | json_query('owningClusterFilesystems[*].filesystem') | join(', ')  }}"
  when: scale_remotemount_debug | bool

# Set current filesystem access and run only the access task on filesystem, this is a list
# this could also be changed to a import_task with loop.

- set_fact:
    current_scale_remotemount_storage_filesystem_name: "{{ remote_clusters_results.json.remoteClusters[0] | json_query('owningClusterFilesystems[*].filesystem') | join(', ')  }}"
  run_once: True

- name: Step 6 - Configure and Mount filesystems
  debug:
    msg: "On Storage Cluster, add filesystem access and attributes for the FileSystem by Client Cluster"
  run_once: True
  loop: "{{ scale_remotemount_filesystem_name }}"
  when:
   - 'item.scale_remotemount_storage_filesystem_name not in current_scale_remotemount_storage_filesystem_name'

- name: Mount Filesystem| Storage Cluster (owning) | Allow and Set the client cluster filesystem access attributes on the Storage Cluster
  uri:
    validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
    force_basic_auth: true
    url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_endpoint }}/remoteclusters/{{ access_cluster_name }}/access/{{ item.scale_remotemount_storage_filesystem_name }}
    method: POST
    user: "{{ scale_remotemount_storage_gui_username }}"
    password: "{{ scale_remotemount_storage_gui_password }}"
    body_format: json
    body: |
      {
        "access": "{{ item.scale_remotemount_access_mount_attributes | default ('rw') }}"
      }
    status_code:
      - 202
  register: uri_result
  run_once: true
  loop: "{{ scale_remotemount_filesystem_name }}"
  when:
   - 'item.scale_remotemount_storage_filesystem_name not in current_scale_remotemount_storage_filesystem_name'

- name: Mount Filesystem | scale_remotemount_debug | Print out the Storage Cluster (owning) | Set the client cluster access attributes on the Storage Cluster
  debug:
    msg: "{{ item.json.jobs.0['jobId'] }}"
  loop: "{{ uri_result.results }}"
  run_once: True
  when:
   - 'item.item.scale_remotemount_storage_filesystem_name not in current_scale_remotemount_storage_filesystem_name'

- name: Mount Filesystem | Storage Cluster (owning) | Check the result of setting the access attributes on the Storage Cluster ##"{{ item.json.jobs.0['jobId'] }}"
  uri:
    validate_certs: "{{ scale_remotemount_validate_certs_uri }}"
    force_basic_auth: true
    url: https://{{ scale_remotemount_storage_gui_hostname }}:{{ scale_remotemount_storage_cluster_gui_port }}/{{ scale_remotemount_scalemgmt_endpoint }}/jobs/{{ item.json.jobs.0['jobId'] }}
    method: GET
    user: "{{ scale_remotemount_storage_gui_username }}"
    password: "{{ scale_remotemount_storage_gui_password }}"
  register: completed_check
  until: completed_check.json.jobs[0].status == "COMPLETED"
  retries: "{{ scale_remotemount_restapi_retries_count }}"
  delay: "{{ scale_remotemount_restapi_retries_delay }}"
  run_once: True
  loop: "{{ uri_result.results }}"
  when:
   - 'item.item.scale_remotemount_storage_filesystem_name not in current_scale_remotemount_storage_filesystem_name'

- name: Mount Filesystem | Client Cluster (access) | Add and Mount the filesystem's on client clusters
  include_tasks: mount_filesystems.yml
  loop: "{{ scale_remotemount_filesystem_name }}"
  run_once: True
  loop_control:
    loop_var: filesystem_loop
    index_var: index
