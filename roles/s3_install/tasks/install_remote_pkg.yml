---
# Remote package installation method

- name: install | Stat remote installation package
  stat:
    path: "{{ scale_install_remotepkg_path }}"
    checksum_algorithm: md5
  register: scale_install_remotepkg

- name: install | Check remote installation package
  assert:
    that: scale_install_remotepkg.stat.exists
    msg: >-
      Please set the variable 'scale_install_remotepkg_path' to point to the
      remote installation package (accessible on Ansible managed node)!

#
# Optionally, verify package checksum
#
- name: install | Stat checksum file
  stat:
    path: "{{ scale_install_remotepkg_path }}.md5"
  register: scale_install_md5_file

- block:  ## when: scale_install_md5_file.stat.exists
    - name: install | Read checksum from file
      slurp:
        src: "{{ scale_install_remotepkg_path }}.md5"
      register: scale_install_md5_sum

    - name: install | Compare checksums
      vars:
        md5sum: "{{ scale_install_md5_sum.content | b64decode }}"
      assert:
        that: md5sum.strip().split().0 == scale_install_remotepkg.stat.checksum
        msg: >-
          Checksums don't match. Please check integritiy of your remote
          installation package!
  when: scale_install_md5_file.stat.exists

#
# Extract installation package
#
- name: install | Stat extracted packages
  stat:
    path: "{{ s3_extracted_path }}"
  register: scale_install_gpfs_rpmdir

- name: install | Make installation package executable
  file:
    path: "{{ scale_install_remotepkg_path }}"
    mode: a+x
  when: not scale_install_gpfs_rpmdir.stat.exists

- name: install | Extract installation package
  command: "{{ scale_install_remotepkg_path + ' --silent' }}"
  args:
    creates:  "{{ s3_extracted_path }}"

- name: install | Stat extracted packages
  stat:
    path: "{{ s3_extracted_path }}"
  register: scale_install_gpfs_rpmdir

- name: install | Check extracted packages
  assert:
    that:
      - scale_install_gpfs_rpmdir.stat.exists
      - scale_install_gpfs_rpmdir.stat.isdir
    msg: >-
      The variable 'scale_version' doesn't seem to match the contents of the
      remote installation package!

- name: install | s3 path
  set_fact:
   scale_s3_url: 's3_rpms/rhel8/'
  when: ansible_distribution in scale_rhel_distribution and ansible_distribution_major_version == '8'

- name: install | s3 path
  set_fact:
   scale_s3_url: 's3_rpms/rhel9/'
  when: ansible_distribution in scale_rhel_distribution and ansible_distribution_major_version == '9'

# Find s3 rpms
- block:  ## when: ansible_distribution in scale_rhel_distribution or ansible_distribution in scale_sles_distribution

  - name: install | Find s3 (noobaa-core, gpfs.mms3) package
    find:
     paths: "{{ s3_extracted_path }}/{{ scale_s3_url }}"
     patterns: noobaa-core*,gpfs.mms3*
    register: scale_install_gpfs_s3

  - name: install | Check valid noobaa-core (noobaa-core) package
    assert:
     that: scale_install_gpfs_s3.matched > 0
     msg: "No S3 (noobaa-core) package found {{ s3_extracted_path }}/{{ scale_s3_url }}gpfs.s3*"

  - name: install | Add GPFS s3 package to list
    vars:
     current_package: "{{ item.path }}"
    set_fact:
     scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
    with_items:
    - "{{ scale_install_gpfs_s3.files }}"

  when: ansible_distribution in scale_rhel_distribution or ansible_distribution in scale_sles_distribution

- debug:
   msg: "{{ scale_install_all_packages }}"
