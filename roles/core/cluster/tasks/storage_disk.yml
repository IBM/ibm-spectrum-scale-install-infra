---
# Define Network Shared Disks (NSDs)

#
# Inspect existing, free, and defined NSDs
#
- block:  ## run_once: true
    - name: storage | Find existing NSDs
      shell: /usr/lpp/mmfs/bin/mmlsnsd -a -Y | grep -v HEADER | cut -d ':' -f 8
      register: scale_storage_existing_nsds
      changed_when: false
      failed_when: false

    - name: storage | Find free NSDs
      shell: /usr/lpp/mmfs/bin/mmlsnsd -F -Y | grep -v HEADER | cut -d ':' -f 8
      register: scale_storage_free_nsds
      changed_when: false
      failed_when: false
  run_once: true
  delegate_to: "{{ groups['scale_cluster_admin_nodes'].0 }}"

- name: storage | Initialize undefined variables
  set_fact:
    scale_disks: []
    scale_storage_nsddefs: []
    scale_storage_nsdservers: []
  when: scale_disks is undefined

- name: storage | Find defined NSDs
  set_fact:
    scale_storage_nsddefs:
      "{{ scale_storage_nsddefs | default([]) + [ item.nsd | default('nsd_' + (item.servers.split(',')[0] | regex_replace('\\W', '_')) + '_' + item.device | basename) ] }}"
    scale_storage_nsdservers:
      "{{ scale_storage_nsdservers | default([]) + [ item.servers | default(scale_daemon_nodename) ] }}"
  when:
    - item.device is defined
    - scale_disks is defined
  with_items:
    - "{{ scale_disks }}"

#
# NSD device discovery script
#

- block:  ## run_once: true
    - name: install | Stat user defined nsddevice disk discovery script
      stat:
        path: "{{ scale_user_created_nsddevices_file_path }}"
      register: scale_user_creatednsddevices
      run_once: true
      delegate_to: localhost

    - name: install | Check user defined nsddevice disk discovery script
      assert:
        that: scale_user_creatednsddevices.stat.exists
        msg: >-
          Please set the variable 'scale_user_created_nsddevices_file_path' to point to the
          correct user defined nsddevices script (accessible on Ansible control machine)!
      run_once: true
      delegate_to: localhost

    #
    # Copy nsd device script to the /var/mmfs/etc/
    #

    - name: install | Copy user defined nsddevice disk discovery script to the node
      copy:
        src: "{{ scale_user_created_nsddevices_file_path }}"
        dest: "{{ scale_user_created_nsddevices_systems_path }}"
        mode: a+x
      when: scale_user_creatednsddevices.stat.exists

  when: scale_user_defined_nsddevices_discovery | bool

- block:  ## run_once: true
    - name: storage | Consolidate defined filesystem parameters
      set_fact:
        scale_storage_fsparams:
          "{{ scale_storage_fsparams | default({}) | combine({ item.filesystem:item }, recursive=true) }}"
      with_items: "{{ ansible_play_hosts | map('extract', hostvars, 'scale_filesystem') | sum(start=[]) }}"
      when: scale_filesystem is defined

#
# Create new NSDs
#
    - name: storage | Cleanup existing NSD StanzaFile(s)
      file:
        path: /var/mmfs/tmp/StanzaFile.new.nsd
        state: absent

    - name: storage | Prepare StanzaFile(s) for NSD creation
      vars:
        current_nsds:
          # only non-existing NSDs
          "{{ scale_storage_nsddefs | difference(scale_storage_existing_nsds.stdout_lines) }}"
      template:
        src: StanzaFile_nsd.j2
        dest: /var/mmfs/tmp/StanzaFile.new.nsd
      register: scale_storage_stanzafile_new

    - name: storage | Accept server license for NSD servers
      command: /usr/lpp/mmfs/bin/mmchlicense server --accept -N "{{ scale_storage_nsdservers | join(',') }}"
      when:
        - scale_storage_stanzafile_new.size > 1
        - scale_storage_stanzafile_new is changed
        

    - name: storage | Create new NSDs
      vars:
        verify: "{{ 'no' if overwriteNSDs | default(scale_storage_filesystem_defaults.overwriteNSDs) else 'yes' }}"
      command: /usr/lpp/mmfs/bin/mmcrnsd -F /var/mmfs/tmp/StanzaFile.new.nsd -v {{ verify }}
      register: scale_nsd_create
      when:
        - scale_storage_stanzafile_new.size > 1
        #- item.item not in scale_storage_existing_nsds.stdout_lines
        - scale_storage_stanzafile_new is changed

    - debug:
         msg: "{{ scale_nsd_create.stderr }}"
      when:
         - scale_nsd_create.stderr is defined
         - scale_nsd_create.stderr_lines is defined and scale_nsd_create.stderr_lines | length > 0
      ignore_errors: yes

    - debug:
        msg: "{{ scale_nsd_create.cmd }}"
      when: scale_nsd_create.cmd is defined
      ignore_errors: yes

    - name: storage | Wait for NSD configuration to be synced across cluster
      wait_for:
        timeout: 30

    #
    # Cleanup
    #
    - name: storage | Copy NSDs stanza file
      copy:
        src: /var/mmfs/tmp/StanzaFile.new.nsd
        dest: /usr/lpp/mmfs/
        mode: a+x
        remote_src: yes
      ignore_errors: yes
      when:
        - scale_storage_stanzafile_new.size > 1
        - scale_storage_stanzafile_new is changed

    - name: storage | Cleanup new NSD StanzaFile(s)
      file:
        path: /var/mmfs/tmp/StanzaFile.new.nsd
        state: absent
  run_once: true
  delegate_to: "{{ groups['scale_cluster_admin_nodes'].0 }}"
