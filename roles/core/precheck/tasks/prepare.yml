---
# Prepare node for installation
- name: prepare | Disable SELinux
  selinux:
    state: disabled
  notify: reboot
  when: scale_prepare_disable_selinux | bool

- name: prepare | Add Spectrum Scale directory to PATH
  lineinfile:
    path: /root/.bashrc
    line: PATH=$PATH:/usr/lpp/mmfs/bin
    state: present
  when: ansible_pkg_mgr != 'zypper'

#
# Configure SSH server
#
- block:  ## when: scale_prepare_enable_ssh_login
    - name: prepare | Enable SSH root login
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: PermitRootLogin
        line: PermitRootLogin yes
        state: present
      notify: reload-sshd

    - name: prepare | Enable SSH pubkey authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: PubkeyAuthentication
        line: PubkeyAuthentication yes
        state: present
      notify: reload-sshd
  when: scale_prepare_enable_ssh_login | bool

- meta: flush_handlers

#
# Configure SSH client
#
- name: prepare | Disable SSH hostkey checking
  lineinfile:
    path: /etc/ssh/ssh_config
    regexp: StrictHostKeyChecking
    line: StrictHostKeyChecking no
    state: present
  when: scale_prepare_disable_ssh_hostkeycheck | bool
#
# Exchange SSH keys
#
- block:  ## when: scale_prepare_exchange_keys
    - name: prepare | Generate SSH key
      vars:
        privkey_path: "{{ scale_prepare_pubkey_path | regex_replace('.pub$', '') }}"
      user:
        name: root
        generate_ssh_key: true
        ssh_key_file: "{{ privkey_path }}"

    - name: prepare | Read public SSH key
      slurp:
        src: "{{ scale_prepare_pubkey_path }}"
      register: scale_prepare_pubkey

    - name: prepare | Authorize all SSH keys
      authorized_key:
        user: root
        key: "{{ hostvars[item].scale_prepare_pubkey.content | b64decode }}"
        state: present
      with_items: "{{ ansible_play_hosts }}"
  when: scale_prepare_exchange_keys | bool

#
# Disable firewall
#
- name: prepare | List installed firewall RPMs
  yum:
    list: firewalld
  register: scale_prepare_firewallrpm
  when: ansible_pkg_mgr == 'yum'

- name: prepare | List installed firewall RPMs
  dnf:
    list: firewalld
  register: scale_prepare_firewalldnfrpm
  when: ansible_pkg_mgr == 'dnf'

- name: prepare | Stop and disable firewall
  service:
    name: firewalld
    state: stopped
    enabled: false
  failed_when: false
  changed_when: false
  when:
    - scale_prepare_disable_firewall | bool
    - ("'installed' in scale_prepare_firewallrpm.results | map(attribute='yumstate') | list") or
      ("'installed' in scale_prepare_firewalldnfrpm.results | map(attribute='yumstate') | list")

#
# Install prereq RPMs
#
- name: prepare | Install prerequisite RPMs
  yum:
    name: yum-utils
    state: present
  when: ansible_pkg_mgr == 'yum'
