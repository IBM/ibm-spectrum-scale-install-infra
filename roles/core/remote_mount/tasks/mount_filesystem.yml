---
#
# Get some cluster information
#
- name: Storage Cluster (owner) | GET the Cluster Information
  uri:
    validate_certs: no
    force_basic_auth: yes
    url: https://{{ storage_cluster_hostname }}:{{ storage_gui_port }}/{{ scalemgmt_endpoint }}/cluster
    method: GET
    user: "{{ storage_gui_user }}"
    password: "{{ storage_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: owning_cluster_info

- name: DEBUG | Storage Cluster | Print the Cluster Information
  debug:
    msg: "{{ owning_cluster_info }}"
  when: debug is true

- name: Client Cluster (access) | GET the Cluster Information
  uri:
    validate_certs: no
    force_basic_auth: yes
    url: https://{{ client_cluster_hostname }}:{{ client_gui_port }}/{{ scalemgmt_endpoint }}/cluster
    method: GET
    user: "{{ client_gui_user }}"
    password: "{{ client_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: access_cluster_info

- name: DEBUG | Client Cluster | Print the Cluster Information
  debug:
    msg: "{{ access_cluster_info }}"
  when: debug is true

- set_fact:
    access_cluster_name: "{{ access_cluster_info.json.cluster.clusterSummary.clusterName }}"
    owning_cluster_name: "{{ owning_cluster_info.json.cluster.clusterSummary.clusterName }}"

- name: DEBUG | Print out the Storage and Client Cluster Names
  debug:
    msg: "Access: {{ access_cluster_name }} and Owning: {{ owning_cluster_name }}"
  when: debug is true

#
# When forceRun, do some cleanup to properly unmount and remove things
#
- import_tasks: cleanup_filesystem.yml
  when: forceRun | bool

- name: Step 2
  debug:
    msg: "Exchange the keys between Storage and Client Clusters"

- name: "Storage Cluster (owner) | Check if the Client Cluster ('{{ access_cluster_name }}') is already defined"
  uri:
    validate_certs: no
    force_basic_auth: yes
    url: https://{{ storage_cluster_hostname }}:{{ storage_gui_port }}/{{ remote_mount_endpoint }}/remoteclusters/{{ access_cluster_name }}
    method: GET
    user: "{{ storage_gui_user }}"
    password: "{{ storage_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: remote_clusters_results
  ignore_errors: true

- name: Storage Cluster (owner) | Delete the Client Cluster, if it exists
  block:
    - name: "DELETE: {{ remote_mount_endpoint }}/remoteclusters/{{ access_cluster_name }}"
      uri:
        validate_certs: no
        force_basic_auth: true
        url: https://{{ storage_cluster_hostname }}:{{ storage_gui_port }}/{{ remote_mount_endpoint }}/remoteclusters/{{ access_cluster_name }}
        method: DELETE
        user: "{{ storage_gui_user }}"
        password: "{{ storage_gui_password }}"
        status_code:
          - 202
      register: delete_call

    - name: "Checking results from the job: {{ delete_call.json.jobs[0].jobId }}"
      uri:
        validate_certs: no
        force_basic_auth: true
        url: https://{{ storage_cluster_hostname }}:{{ storage_gui_port }}/{{ scalemgmt_endpoint }}/jobs/{{ delete_call.json.jobs[0].jobId }}
        method: GET
        user: "{{ storage_gui_user }}"
        password: "{{ storage_gui_password }}"
      register: completed_check
      until: completed_check.json.jobs[0].status == "COMPLETED"
      retries: "{{ restapi_retries_count }}"
      delay: "{{ restapi_retries_delay }}"
  when: not remote_clusters_results.failed

- name: Client Cluster (access) | Get the Public Key
  uri:
    validate_certs: no
    force_basic_auth: yes
    url: https://{{ client_cluster_hostname }}:{{ client_gui_port }}/{{ remote_mount_endpoint }}/authenticationkey
    method: GET
    user: "{{ client_gui_user }}"
    password: "{{ client_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: accesskey_result

- name: DEBUG | Print out the Client Cluster (access) Public Key results
  debug:
    var: accesskey_result
  when: debug is true

- name: Storage Cluster (owner) | Send the Public Key of the Client Cluster (access)
  uri:
    validate_certs: no
    force_basic_auth: true
    url: https://{{ storage_cluster_hostname }}:{{ storage_gui_port }}/{{ remote_mount_endpoint }}/remoteclusters
    method: POST
    user: "{{ storage_gui_user }}"
    password: "{{ storage_gui_password }}"
    body_format: json
    body: |
      {
        "remoteCluster": "{{ access_cluster_name }}",
        "key": {{ accesskey_result.json.key | trim | replace(", ", ",") }}
      }
    status_code:
      - 202
  register: send_key

- name: "Storage Cluster (owner) | Check the result of adding the Client Cluster {{ send_key.json.jobs[0].jobId }}"
  uri:
    validate_certs: no
    force_basic_auth: true
    url: https://{{ storage_cluster_hostname }}:{{ storage_gui_port }}/{{ scalemgmt_endpoint }}/jobs/{{ send_key.json.jobs[0].jobId }}
    method: GET
    user: "{{ storage_gui_user }}"
    password: "{{ storage_gui_password }}"
  register: completed_check
  until: completed_check.json.jobs[0].status != "FAILED"
  retries: "{{ restapi_retries_count }}"
  delay: "{{ restapi_retries_delay }}"

#
# Send the Storage Cluster Key to the Client Cluster
#
- name: Client Cluster (access) | See if the Storage Cluster is already defined
  uri:
    validate_certs: no
    force_basic_auth: yes
    url: https://{{ client_cluster_hostname }}:{{ client_gui_port }}/{{ remote_mount_endpoint }}/remoteclusters/{{ owning_cluster_name }}
    method: GET
    user: "{{ client_gui_user }}"
    password: "{{ client_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: access_clusters_results
  ignore_errors: true

- name: Client Cluster (access) | Delete the Storage Cluster, if it exists
  block:
    - name: "DELETE: {{ remote_mount_endpoint }}/remoteclusters/{{ owning_cluster_name }}"
      uri:
        validate_certs: no
        force_basic_auth: true
        url: https://{{ client_cluster_hostname }}:{{ client_gui_port }}/{{ remote_mount_endpoint }}/remoteclusters/{{ owning_cluster_name }}
        method: DELETE
        user: "{{ client_gui_user }}"
        password: "{{ client_gui_password }}"
        status_code:
          - 202
      register: delete_call

    - name: "Checking results from the job: {{ delete_call.json.jobs[0].jobId }}"
      uri:
        validate_certs: no
        force_basic_auth: true
        url: https://{{ client_cluster_hostname }}:{{ client_gui_port }}/{{ scalemgmt_endpoint }}/jobs/{{ delete_call.json.jobs[0].jobId }}
        method: GET
        user: "{{ client_gui_user }}"
        password: "{{ client_gui_password }}"
      register: completed_check
      until: completed_check.json.jobs[0].status == "COMPLETED"
      retries: "{{ restapi_retries_count }}"
      delay: "{{ restapi_retries_delay }}"
  when: not access_clusters_results.failed

- name: Storage Cluster (owner) | Get the Public Key
  uri:
    validate_certs: no
    force_basic_auth: yes
    url: https://{{ storage_cluster_hostname }}:{{ storage_gui_port }}/{{ remote_mount_endpoint }}/authenticationkey
    method: GET
    user: "{{ storage_gui_user }}"
    password: "{{ storage_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: owningkey_result

- name: DEBUG | Print out the Storage Cluster (owing) Public Key results
  debug:
    var: owningkey_result
  when: debug is true

- name: Step 3
  debug:
    msg: "Add the storage cluster (mmremotecluster add)"

- name: Client Cluster (access) | List the remote cluster already defined
  uri:
    validate_certs: no
    force_basic_auth: true
    url: https://{{ client_cluster_hostname }}:{{ client_gui_port }}/{{ remote_mount_endpoint }}/owningclusters
    method: GET
    user: "{{ client_gui_user }}"
    password: "{{ client_gui_password }}"
  register: remote_clusters_result

- name: DEBUG | Print out the remote clusters
  debug:
    msg: "{{ remote_clusters_result.json }}"
  when: debug is true

# The remote_clusters_results is in an array, so looping here incase there are multiple remote clusters
# We want to delete the one where the owningCluster name matches what we are trying to do a remote mount on
- name: Delete the clusters on a loop...
  include_tasks: delete_remote_cluster.yml
  when: item.owningCluster == owning_cluster_name
  loop: "{{ remote_clusters_result.json.owningClusters }}"

- name: "Storage Cluster (owning) | GET Node Info - GET {{ scalemgmt_endpoint }}/nodes"
  uri:
    validate_certs: no
    force_basic_auth: yes
    url: https://{{ storage_cluster_hostname }}:{{ storage_gui_port }}/{{ scalemgmt_endpoint }}/nodes
    method: GET
    user: "{{ storage_gui_user }}"
    password: "{{ storage_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: owning_cluster_nodes

- set_fact:
    owning_nodes_name: []

- set_fact:
    owning_nodes_name: "{{ owning_nodes_name }} + [ '{{ item.adminNodeName }}' ]"
  with_items: "{{ owning_cluster_nodes.json.nodes }}"

- name: DEBUG | Print out the array storing the nodes in the Storage Cluster (owning)
  debug:
    msg: "{{ owning_nodes_name }}"
  when: debug is true

- name: Client Cluster (access) | Add Storage Cluster as a Remote Cluster
  uri:
    validate_certs: no
    force_basic_auth: true
    url: https://{{ client_cluster_hostname }}:{{ client_gui_port }}/{{ remote_mount_endpoint }}/owningclusters
    method: POST
    user: "{{ client_gui_user }}"
    password: "{{ client_gui_password }}"
    body_format: json
    body: |
      {
        "owningCluster": "{{ owning_cluster_name }}",
        "key": {{ owningkey_result.json.key | trim | replace(", ", ",") }},
        "contactNodes": {{ owning_nodes_name }}
      }
    status_code:
      - 202
  register: uri_result

- name: "Client Cluster (access) | Check the result of adding the remote Storage Cluster (JOB: {{ uri_result.json.jobs[0].jobId }})"
  uri:
    validate_certs: no
    force_basic_auth: true
    url: https://{{ client_cluster_hostname }}:{{ client_gui_port }}/{{ scalemgmt_endpoint }}/jobs/{{ uri_result.json.jobs[0].jobId }}
    method: GET
    user: "{{ client_gui_user }}"
    password: "{{ client_gui_password }}"
  register: completed_check
  until: completed_check.json.jobs[0].status == "COMPLETED"
  retries: "{{ restapi_retries_count }}"
  delay: "{{ restapi_retries_delay }}"

- name: Step 4
  debug:
    msg: "On Storage Cluster, add the access attributes for the Client Cluster"

- name: Storage Cluster (owning) | Set the client cluster access attributes on the Storage Cluster
  uri:
    validate_certs: no
    force_basic_auth: true
    url: https://{{ storage_cluster_hostname }}:{{ storage_gui_port }}/{{ remote_mount_endpoint }}/remoteclusters/{{ access_cluster_name }}/access/{{ storage_filesystem_name }}
    method: POST
    user: "{{ storage_gui_user }}"
    password: "{{ storage_gui_password }}"
    body_format: json
    body: |
      {
        "access": "{{ access_mount_attributes }}"
      }
    status_code:
      - 202
  register: uri_result

- name: "Storage Cluster (owning) | Check the result of setting the access attributes on the Storage Cluster (JOB: {{ uri_result.json.jobs[0].jobId }})"
  uri:
    validate_certs: no
    force_basic_auth: true
    url: https://{{ storage_cluster_hostname }}:{{ storage_gui_port }}/{{ scalemgmt_endpoint }}/jobs/{{ uri_result.json.jobs[0].jobId }}
    method: GET
    user: "{{ storage_gui_user }}"
    password: "{{ storage_gui_password }}"
  register: completed_check
  until: completed_check.json.jobs[0].status == "COMPLETED"
  retries: "{{ restapi_retries_count }}"
  delay: "{{ restapi_retries_delay }}"

- name: Step 5
  debug:
    msg: "Add the remotefileystem and mount it on the Client Side"

- name: Client Cluster (access) | Create the remotefs and then mount the filesystem
  uri:
    validate_certs: no
    force_basic_auth: true
    url: https://{{ client_cluster_hostname }}:{{ client_gui_port }}/{{ remote_mount_endpoint }}/remotefilesystems
    method: POST
    user: "{{ client_gui_user }}"
    password: "{{ client_gui_password }}"
    body_format: json
    body: |
      {
        "remoteFilesystem": "{{ client_filesystem_name }}",
        "owningFilesystem": "{{ storage_filesystem_name }}",
        "owningCluster": "{{ owning_cluster_name }}",
        "remoteMountPath": "{{ client_remotemount_path | realpath }}",
        "mountOptions": "{{ access_mount_attributes }}",
        "automount": "yes",
        "mountOnNodes": "all"
      }
    status_code:
      - 202
  register: send_key

- name: "Client Cluster (access) | Check the result of adding the remotefs and mounting the filesystem (JOB: {{ send_key.json.jobs[0].jobId }})"
  uri:
    validate_certs: no
    force_basic_auth: true
    url: https://{{ client_cluster_hostname }}:{{ client_gui_port }}/{{ scalemgmt_endpoint }}/jobs/{{ send_key.json.jobs[0].jobId }}
    method: GET
    user: "{{ client_gui_user }}"
    password: "{{ client_gui_password }}"
  register: completed_check
  until: completed_check.json.jobs[0].status == "COMPLETED"
  retries: "{{ restapi_retries_count }}"
  delay: "{{ restapi_retries_delay }}"
