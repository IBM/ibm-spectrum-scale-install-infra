---
# Sanity check of configuration variables

- block:
    - block:
        - name: check | Stat GPFS base package
          find:
            paths: "{{ scale_install_directory_pkg_path }}"
            patterns: gpfs.base*{{ scale_architecture }}*
          register: stat_result

        - name: check | If GPFS base package is exists or not
          assert:
            that: stat_result.matched > 0
            msg: >-
              Unable to determine GPFS version. Ensure the GPFS packages are
              available in a relative path to the specified directory.

        - name: common | Find available scale version
          shell: rpm -qp "{{ scale_install_directory_pkg_path }}/gpfs.base-*.{{ scale_architecture }}.rpm"
                 --qf '%{VERSION}.%{RELEASE}\n' | cut -d '.' -f -4
          args:
             warn: false
          register: scale_gpfsversion
          changed_when: false

        - name: check | Set scale version
          set_fact:
            scale_version: "{{ scale_gpfsversion.stdout }}"
      when: scale_install_directory_pkg_path is defined

    - block:
        - name: check | Set package installation method
          set_fact:
            scale_package: "{{ scale_install_localpkg_path | basename }}"
          when: scale_install_localpkg_path is defined

        - name: check | Set package installation method
          set_fact:
            scale_package: "{{ scale_install_remotepkg_path | basename }}"
          when: scale_install_remotepkg_path is defined

        - name: common | Find available scale version
          shell: "echo {{ scale_package }} | cut -d '-' -f 2"
          args:
           warn: false
          register: scale_se_gpfsversion
          changed_when: false

        - name: check | Set default scale version
          set_fact:
            scale_version: "{{ scale_se_gpfsversion.stdout }}"

      when: scale_install_localpkg_path is defined or scale_install_remotepkg_path is defined
  when: scale_version is undefined
  run_once: true
  delegate_to: localhost

- name: check | Check Spectrum Scale version
  assert:
    that:
      - scale_version is defined
      - scale_version is version_compare(scale_minversion, '>=')
    msg: >-
      Please set the variable 'scale_version' to the correct version
      (minimum: {{ scale_minversion }})!

- name: check | Check package manager
  assert:
    that: ansible_pkg_mgr in scale_pkg_mgr
    msg: >-
      This system uses an unsupported package manager ({{ ansible_pkg_mgr }})!

- name: check | Count daemon processes
  command: pgrep mmfsd
  register: scale_daemon_procs
  changed_when: false
  failed_when: false

- name: check | Check if daemon is running
  set_fact:
    scale_daemon_running: "{{ true if scale_daemon_procs.rc == 0 else false }}"

# Make default variables available in hostvars
- name: check | Set default daemon nodename
  set_fact:
    scale_daemon_nodename: "{{ scale_daemon_nodename }}"
  when: hostvars[inventory_hostname].scale_daemon_nodename is undefined

- block:
    - name: check | Get architecture
      command: dpkg --print-architecture
      register: ubuntu_arch
      changed_when: false

    - name: check | Set scale_architecture
      set_fact:
        scale_architecture: "{{ ubuntu_arch.stdout }}"
  when: ansible_distribution in scale_ubuntu_distribution
