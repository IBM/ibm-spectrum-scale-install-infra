---
# Local license package installation method

#
# Find GPFS BASE
#
- name: install | Find GPFS License (gpfs.license) RPM
  find:
    paths: /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/
    patterns: gpfs.license.*.{{ scale_architecture }}.rpm
  register: scale_install_gpfs_license

- name: install | Check valid GPFS License (gpfs.license) RPM
  assert:
    that: scale_install_gpfs_license.matched > 0
    msg: >-
      No GPFS License (gpfs.license) RPM found:
      /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/gpfs.license.*.{{ scale_architecture }}.rpm

- name: install | Check valid only one GPFS License (gpfs.license) RPM
  assert:
    that:
      - scale_install_gpfs_license.matched > 0
      - scale_install_gpfs_license.matched == 1
    msg: >-
      More than one GPFS License (gpfs.license) RPM found:
      /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/gpfs.license.*.{{ scale_architecture }}.rpm

- name: install | Find GPFS License rpm
  vars:
    gpfs_license_rpm: "{{ scale_install_gpfs_license.files.0.path | basename }}"
  set_fact:
    scale_gpfs_license_rpm: "{{ gpfs_license_rpm }}"
  
#
# Find GPFS adv packgae
#
- name: install | Find GPFS Advance (gpfs.adv) RPM
  find:
    paths: /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/
    patterns: gpfs.adv-*.{{ scale_architecture }}.rpm
  register: scale_install_gpfs_adv
  when: '"gpfs.license.std" not in scale_gpfs_license_rpm'


#
# Find GPFS crypto packgae
#
- name: install | Find GPFS crypto (gpfs.crypto) RPM
  find:
    paths: /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/
    patterns: gpfs.crypto-*.{{ scale_architecture }}.rpm
  register: scale_install_gpfs_crypto
  when: '"gpfs.license.std" not in scale_gpfs_license_rpm'


#
# Add GPFS RPMs
#
- name: install | Add GPFS License RPMs to list
  vars:
    current_rpm: /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/{{ item }}.rpm
  set_fact:
    scale_install_license_rpms: "{{ scale_install_license_rpms + [ current_rpm ] }}"
  with_items:
    - "{{ scale_install_gpfs_license.files.0.path | basename | regex_replace('\\.rpm$', '') }}"

#
# Add GPFS RPMs
#
- name: install | Add GPFS Dependent License RPMs to list
  vars:
    license_rpm: "{{ scale_install_gpfs_license.files.0.path | basename }}"
    current_rpm: /usr/lpp/mmfs/{{ scale_version }}/gpfs_rpms/{{ item }}.rpm
  set_fact:
    scale_install_license_rpms: "{{ scale_install_license_rpms + [ current_rpm ] }}"
  with_items:
    - "{{ scale_install_gpfs_adv.files.0.path | basename | regex_replace('\\.rpm$', '') }}"
    - "{{ scale_install_gpfs_crypto.files.0.path | basename | regex_replace('\\.rpm$', '') }}"
  when: '"gpfs.license.std" not in scale_gpfs_license_rpm'
