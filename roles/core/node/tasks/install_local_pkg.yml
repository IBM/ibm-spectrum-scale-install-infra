---
# Local package installation method

- block:  ## run_once: true
    - name: install | Stat local installation package
      stat:
        path: "{{ scale_install_localpkg_path }}"
      register: scale_install_localpkg

    - name: install | Check local installation package
      assert:
        that: scale_install_localpkg.stat.exists
        msg: >-
          Please set the variable 'scale_install_localpkg_path' to point to the
          local installation package (accessible on Ansible control machine)!

#
# Optionally, verify package checksum
#
    - name: install | Stat checksum file
      stat:
        path: "{{ scale_install_localpkg_path }}.md5"
      register: scale_install_md5_file

    - block:  ## when: scale_install_md5_file.stat.exists
        - name: install | Read checksum from file
          set_fact:
            scale_install_md5_sum: "{{ lookup('file', scale_install_localpkg_path + '.md5') }}"

        - name: install | Compare checksums
          assert:
            that: scale_install_md5_sum.strip().split().0 == scale_install_localpkg.stat.md5
            msg: >-
              Checksums don't match. Please check integritiy of your local
              installation package!
      when: scale_install_md5_file.stat.exists
  run_once: true
  delegate_to: localhost

#
# Copy installation package
#
- name: install | Stat extracted packages
  stat:
    path: "{{ gpfs_path_url }}"
  register: scale_install_gpfs_packagedir

- block:  ## when: not scale_install_gpfs_packagedir.stat.exists
    - name: install | Stat temporary directory
      stat:
        path: "{{ scale_install_localpkg_tmpdir_path }}"
      register: scale_install_localpkg_tmpdir

    - name: install | Check temporary directory
      assert:
        that:
          - scale_install_localpkg_tmpdir.stat.exists
          - scale_install_localpkg_tmpdir.stat.isdir
        msg: >-
          Please set the variable 'scale_install_localpkg_tmpdir_path' to point
          to a temporary directory on the remote system!

    - name: install | Copy installation package to node
      copy:
        src: "{{ scale_install_localpkg_path }}"
        dest: "{{ scale_install_localpkg_tmpdir_path }}"
        mode: a+x
  when: not scale_install_gpfs_packagedir.stat.exists

#
# Extract installation package
#
- name: install | Extract installation package
  vars:
    localpkg: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
  command: "{{ localpkg + ' --silent' }}"
  args:
    creates: "{{ gpfs_path_url }}"

- name: install | Stat extracted packages
  stat:
    path: "{{ gpfs_path_url }}"
  register: scale_install_gpfs_packagedir

- name: install | Check extracted packages
  assert:
    that:
      - scale_install_gpfs_packagedir.stat.exists
      - scale_install_gpfs_packagedir.stat.isdir
    msg: >-
      The variable 'scale_version' doesn't seem to match the contents of the
      local installation package!

#
# Delete installation package
#
- name: install | Delete installation package from node
  file:
    path: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
    state: absent

#
# Find GPFS BASE
#
- name: install | Find GPFS BASE (gpfs.base) package
  find:
    paths: "{{ gpfs_path_url }}"
    patterns: gpfs.base*{{ scale_architecture }}*
  register: scale_install_gpfs_base

- name: install | Check valid GPFS BASE (gpfs.base) package
  assert:
    that: scale_install_gpfs_base.matched > 0
    msg: >-
      No GPFS BASE (gpfs.base) package found:
      {{ gpfs_path_url }}/gpfs.base*{{ scale_architecture }}*

#
# Find GPFS gpfs.docs
#
- name: install | Find GPFS docs (gpfs.docs) package
  find:
    paths: "{{ gpfs_path_url }}"
    patterns: gpfs.docs*
  register: scale_install_gpfs_doc

- name: install | Check valid GPFS docs (gpfs.docs) package
  assert:
    that: scale_install_gpfs_doc.matched > 0
    msg: >-
      No GPFS docs (gpfs.docs) package found:
      {{ gpfs_path_url }}/gpfs.docs*

#
# Find GPFS gpfs.msg.en_US
#
- name: install | Find gpfs.msg.en_US (gpfs.msg.en_US) package
  find:
    paths: "{{ gpfs_path_url }}"
    patterns: gpfs.msg.en*
  register: scale_install_gpfs_msg

- name: install | Check valid GPFS (gpfs.msg.en_US) package
  assert:
    that: scale_install_gpfs_msg.matched > 0
    msg: >-
      No GPFS BASE (gpfs.base) package found:
      {{ gpfs_path_url }}/gpfs.msg.en*

#
# Find GPFS gpfs.compression
#
- name: install | Find GPFS Compression (gpfs.compression) package
  find:
    paths: "{{ gpfs_path_url }}"
    patterns: gpfs.compression*{{ scale_architecture }}*
  register: scale_install_gpfs_compression

- name: install | Check valid GPFS Compression(gpfs.compression) package
  assert:
    that: scale_install_gpfs_compression.matched > 0
    msg: >-
      No GPFS Compression (gpfs.compression) package found:
      {{ gpfs_path_url }}/gpfs.compression*{{ scale_architecture }}*

#
# Find GSKit
#
- name: install | Find Global Security Kit (GSKit) package
  find:
    paths: "{{ gpfs_path_url }}"
    patterns: gpfs.gskit*{{ scale_architecture }}*
  register: scale_install_gpfs_gskit

- name: install | Check valid Global Security Kit (GSKit) package
  assert:
    that: scale_install_gpfs_gskit.matched > 0
    msg: >-
      No Global Security Kit (GSKit) package found:
      {{ gpfs_path_url }}/gpfs.gskit*{{ scale_architecture }}*

#
# Add GPFS packages
#
- name: install | Add GPFS packages to list
  vars:
    current_package: "{{ gpfs_path_url }}/{{ item }}"
  set_fact:
    scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
  with_items:
    - "{{ scale_install_gpfs_base.files.0.path | basename }}"
    - "{{ scale_install_gpfs_doc.files.0.path | basename }}"
    - "{{ scale_install_gpfs_msg.files.0.path | basename }}"
    - "{{ scale_install_gpfs_gskit.files.0.path | basename }}"
    - "{{ scale_install_gpfs_compression.files.0.path | basename }}"

- name: install | Add GPFS packages to list (prior to version 5.0.2.0)
  vars:
    current_package: "{{ gpfs_path_url }}/{{ item }}"
  set_fact:
    scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
  with_items:
    - "{{ scale_install_add_packages_pre502 }}"
  when: scale_version is version_compare('5.0.2', '<=')

#
# Add GPFS packages for building GPL module from source
#

- name: install | Find GPFS gpl (gpfs.gpl) package
  find:
    paths: "{{ gpfs_path_url }}"
    patterns: gpfs.gpl*
  register: scale_install_gpfs_gpl

- name: install | Check valid GPFS GPL (gpfs.gpl) package
  assert:
    that: scale_install_gpfs_gpl.matched > 0
    msg: >-
      No GPFS GPL (gpfs.gpl) package found:
      {{ gpfs_path_url }}/gpfs.gpl*

- name: install | Add GPFS packages for building GPL module from source to list
  vars:
    current_package: "{{ gpfs_path_url }}/{{ item }}"
  set_fact:
    scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
  when: scale_install_gplbin_package is undefined
  with_items: "{{ scale_install_gpfs_gpl.files.0.path | basename }}"
