---
# Install or update packages

#
# Choose installation method from configuration variables
#
- block:  ## run_once: true
    - name: install | Check for repository installation method
      set_fact:
        scale_installmethod: repository
      when:
        - scale_install_repository_url is defined

    - name: install | Check for remotepkg installation method
      set_fact:
        scale_installmethod: remote_pkg
      when:
        - scale_install_repository_url is undefined
        - scale_install_remotepkg_path is defined

    - name: install | Check for localpkg installation method
      set_fact:
        scale_installmethod: local_pkg
      when:
        - scale_install_repository_url is undefined
        - scale_install_remotepkg_path is undefined
        - scale_install_localpkg_path is defined

    - name: install | Check for directory package installation method
      set_fact:
        scale_installmethod: dir_pkg
      when:
        - scale_install_repository_url is undefined
        - scale_install_remotepkg_path is undefined
        - scale_install_localpkg_path is undefined
        - scale_install_directory_pkg_path is defined

    - name: install | Check installation method
      assert:
        that: scale_installmethod is defined
        msg: >-
          Please set the appropriate variable 'scale_install_*' for your desired
          installation method!
  run_once: true
  delegate_to: localhost

#
# Run chosen installation method to get list of packages
#
- name: install | gpfs base path
  set_fact:
    gpfs_path_url: '{{ gpfs_extracted_path }}/gpfs_rpms'
  when:
    - scale_install_localpkg_path is defined or scale_install_remotepkg_path is defined
    - ansible_distribution in scale_rhel_distribution or ansible_distribution in scale_sles_distribution

- name: install | gpfs base path
  set_fact:
    gpfs_path_url: "{{ gpfs_extracted_path }}/gpfs_debs"
  when:
    - scale_install_localpkg_path is defined or scale_install_remotepkg_path is defined
    - ansible_distribution in scale_ubuntu_distribution

- name: install | Initialize list of packages
  set_fact:
    scale_install_all_packages: []

- name: install | Initialize license list of packages
  set_fact:
    scale_install_license_packages: []

- include_tasks: install_{{ scale_installmethod }}.yml

- include_tasks: install_gplbin.yml
  when: scale_install_gplbin_package is defined

- include_tasks: install_license_pkg.yml
  when: scale_install_remotepkg_path is defined or scale_install_localpkg_path is defined or scale_install_directory_pkg_path is defined

- include_tasks: install_license_repository.yml
  when: scale_install_repository_url is defined

- meta: flush_handlers

#
# Fail upon online update
#
# - include_tasks: update.yml
- include_tasks: upgrade.yml
  when:
    - scale_daemon_running | bool
    - ansible_distribution in scale_rhel_distribution

#
# Install or update packages
#
- block:  ## when: not scale_daemon_running
    - block:
        - name: install | List installed GPFS packages
          yum:
            list: gpfs.base
            disablerepo: spectrum-scale-gpfs
          register: scale_install_packagelist
          when: ansible_pkg_mgr == 'yum'

        - name: install | Install GPFS packages
          yum:
            name: "{{ scale_install_all_packages }}"
            state: present
          register: scale_install_packageresult
          when: ansible_pkg_mgr == 'yum'

        - name: install | Install GPFS License packages
          yum:
            name: "{{ scale_install_license_packages }}"
            state: present
          register: scale_install_license_packageresult
          when: ansible_pkg_mgr == 'yum'

        - name: install | List installed GPFS packages
          dnf:
            list: gpfs.base
            disablerepo: spectrum-scale-gpfs
          register: scale_install_dnfpackagelist
          when: ansible_pkg_mgr == 'dnf'

        - name: install | Install GPFS packages
          dnf:
            name: "{{ scale_install_all_packages }}"
            state: present
          register: scale_install_dnfpackageresult
          when: ansible_pkg_mgr == 'dnf'

        - name: install | Install GPFS License packages
          dnf:
            name: "{{ scale_install_license_packages }}"
            state: present
          register: scale_install_license_dnfpackageresult
          when: ansible_pkg_mgr == 'dnf'

        - name: install | Check if GPFS packages were updated
          set_fact:
            scale_install_updated: true
          when:
            - ("'installed' in scale_install_packagelist.results | map(attribute='yumstate') | list") or
              ("'installed' in scale_install_dnfpackagelist.results | map(attribute='yumstate' | list")
            - (scale_install_packageresult.changed) or (scale_install_dnfpackageresult.changed)
      when: ansible_pkg_mgr == 'yum' or ansible_pkg_mgr == 'dnf'

    - block:
        - name: install | Install GPFS packages
          apt:
            deb: "{{ item }}"
            state: present
          register: scale_install_debpackageresult
          with_items:
            - "{{ scale_install_all_packages }}"

        - name: install | Install GPFS License packages
          apt:
            deb: "{{ item }}"
            state: present
          with_items:
            - "{{ scale_install_license_packages }}"
      
        - name: install | Check if GPFS packages were updated
          set_fact:
            scale_install_updated: true
          when:
            - (scale_install_debpackageresult.changed)
      when: ansible_pkg_mgr == 'apt' and scale_install_repository_url is not defined

    - block:
        - name: install | Install GPFS Core packages
          package:
           name: "{{ scale_install_all_packages }}"
           state: present

        - name: install | Install GPFS Core packages
          package:
           name: "{{ scale_install_license_packages }}"
           state: present
      when: ansible_pkg_mgr == 'apt' and scale_install_repository_url is defined

    - block:
        - name: install | dependencies pacage
          zypper:
            name: binutils
            state: present

        - name: install | Install GPFS packages
          zypper:
            name: "{{ scale_install_all_packages }}"
            state: present
            disable_gpg_check: yes
          register: scale_install_zypppackageresult

        - name: install | Check if GPFS packages were updated
          set_fact:
            scale_install_updated: true
          when:
            - (scale_install_zypppackageresult.changed)
      when: ansible_pkg_mgr == 'zypper'
        #- (scale_install_license_packageresult.changed) or (scale_install_license_dnfpackageresult.changed)
  when: not scale_daemon_running
