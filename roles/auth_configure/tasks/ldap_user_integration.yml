---
# Installing required LDAP client packages for the integration.

- name: LDAP | OS version check
  ansible.builtin.shell: "grep -oE 'release [0-9]+' /etc/redhat-release | awk '{print $2}'"
  register: rhel_version
  changed_when: false

- block:
    - name: LDAP | Enable LDAP authentication
      ansible.builtin.command:
        cmd: authconfig --enableldap --enableldapauth --ldapserver=ldap://{{ LDAP_SERVER_IP }} --ldapbasedn="dc={{ BASE_DN.split('.')[0] }},dc={{ BASE_DN.split('.')[1] }}" --enablemkhomedir --update
      register: enable_authconfig

    - debug:
        var: enable_authconfig.stdout_lines

    - name: Update nsswitch.conf
      ansible.builtin.lineinfile:
        path: /etc/nsswitch.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '^passwd:', line: 'passwd: files ldap' }
        - { regexp: '^shadow:', line: 'shadow: files ldap' }
        - { regexp: '^group:', line: 'group: files ldap' }

    - name: Remove 'auth' lines from password-auth PAM configuration
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        state: absent
        regexp: '^auth.*'
      loop:
        - /etc/pam.d/password-auth
        - /etc/pam.d/system-auth

    - name: Add custom auth lines to PAM configuration files
      ansible.builtin.blockinfile:
        path: "{{ item }}"
        block: |
          auth        required      pam_env.so
          auth        sufficient    pam_unix.so nullok try_first_pass
          auth        requisite     pam_succeed_if.so uid >= 1000 quiet_success
          auth        sufficient    pam_ldap.so use_first_pass
          auth        required      pam_deny.so
        create: yes
      loop:
        - /etc/pam.d/password-auth
        - /etc/pam.d/system-auth
        - /etc/pam.d/sshd

    - name: Remove nslcd.conf file
      ansible.builtin.file:
        path: /etc/nslcd.conf
        state: absent

    - name: LDAP | Update LDAP Configuration with LDAP_SERVER and BASE_DN
      ansible.builtin.blockinfile:
        path: /etc/nslcd.conf
        block: |
          uid nslcd
          gid ldap
          uri ldap://{{ LDAP_SERVER_IP }}/
          base dc={{ BASE_DN.split('.')[0] }},dc={{ BASE_DN.split('.')[1] }}
        create: yes

    - name: Allow SSH authentication
      ansible.builtin.replace:
        path: /etc/ssh/sshd_config
        regexp: 'PasswordAuthentication no'
        replace: 'PasswordAuthentication yes'
      notify: Restart SSH Service

    - name: Restart and enable the services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
        enabled: yes
      loop:
        - nslcd
        - nscd
  when: rhel_version.stdout in ["7", "8"]

- block:
    - name: Remove sssd.conf file
      ansible.builtin.file:
        path: /etc/sssd/sssd.conf
        state: absent

    - name: Update LDAP Configuration on sssd.conf
      ansible.builtin.blockinfile:
        path: /etc/sssd/sssd.conf
        block: |
          [sssd]
          config_file_version = 2
          services = nss, pam,autofs
          domains = default
          [nss]
          homedir_substring = /home
          [pam]
          [domain/default]
          id_provider = ldap
          autofs_provider = ldap
          auth_provider = ldap
          chpass_provider = ldap
          ldap_uri = ldap://{{ LDAP_SERVER_IP }}
          ldap_search_base = dc={{ BASE_DN.split('.')[0] }},dc={{ BASE_DN.split('.')[1] }}
          cache_credentials = True
          ldap_tls_reqcert = never
        create: yes

    - name: Set permissions for sssd.conf
      file:
          path: /etc/sssd/sssd.conf
          mode: "0600"
      become: yes

    - name: Set ownership for sssd.conf
      file:
        path: /etc/sssd/sssd.conf
        owner: root
        group: root
      become: yes

    - name: Append BASE and URI to ldap.conf
      ansible.builtin.blockinfile:
        path: /etc/openldap/ldap.conf
        block: |
          BASE   dc={{ BASE_DN.split('.')[0] }},dc={{ BASE_DN.split('.')[1] }}
          URI    ldap://{{ LDAP_SERVER_IP }}
        create: yes

    - name: Run authselect to select sssd with mkhomedir
      command: authselect select sssd with-mkhomedir --force

    - name: Enable and start sssd and oddjobd services
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - sssd
        - oddjobd

    - name: Allow SSH authentication
      ansible.builtin.replace:
        path: /etc/ssh/sshd_config
        regexp: 'PasswordAuthentication no'
        replace: 'PasswordAuthentication yes'
      notify: Restart SSH Service

    - name: Restart sssd service
      ansible.builtin.service:
        name: sssd
        state: restarted
        enabled: yes
  when: rhel_version.stdout in ["9"]