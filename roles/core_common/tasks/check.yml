---
# Sanity check of configuration variables

- block:
    - block:
        - name: check | Stat GPFS base package
          find:
            paths: "{{ scale_install_directory_pkg_path }}"
            patterns: gpfs.base*{{ scale_architecture }}*
          register: scale_stat_result

        - name: check | If GPFS base package is exists or not
          assert:
            that: scale_stat_result.matched > 0
            msg: >-
              Unable to determine GPFS version. Ensure the GPFS packages are
              available in a relative path to the specified directory.

        - name: check | Find available scale version
          shell:
            rpm -qp "{{ scale_install_directory_pkg_path }}/gpfs.base-*.{{ scale_architecture }}.rpm"
            --qf '%{VERSION}.%{RELEASE}\n' | cut -d '.' -f -4
          register: scale_gpfsversion
          changed_when: false

        - name: check | Set scale version
          set_fact:
            scale_version: "{{ scale_gpfsversion.stdout }}"
      when: scale_install_directory_pkg_path is defined

    - block:
        - name: check | Set package installation method
          set_fact:
            scale_package: "{{ scale_install_localpkg_path | basename }}"
          when: scale_install_localpkg_path is defined

        - name: check | Set package installation method
          set_fact:
            scale_package: "{{ scale_install_remotepkg_path | basename }}"
          when: scale_install_remotepkg_path is defined

        - name: check | Find available scale version
          shell: "echo {{ scale_package }} | cut -d '-' -f 2"
          register: scale_se_gpfsversion
          changed_when: false

        - name: check | Set default scale version
          set_fact:
            scale_version: "{{ scale_se_gpfsversion.stdout }}"

      when: scale_install_localpkg_path is defined or scale_install_remotepkg_path is defined
  when: scale_version is undefined
  run_once: true
  delegate_to: localhost

- name: check | Check Spectrum Scale version
  assert:
    that:
      - scale_version is defined
      - scale_version is version_compare(scale_minversion, '>=')
    msg: >-
      Please set the variable 'scale_version' to the correct version
      (minimum: {{ scale_minversion }})!
    quiet: true

- name: check | Check package manager
  assert:
    that: ansible_pkg_mgr in scale_pkg_mgr
    msg: >-
      This system uses an unsupported package manager ({{ ansible_pkg_mgr }})!
    quiet: true

- name: check | Count daemon processes
  command: pgrep mmfsd
  register: scale_daemon_procs
  changed_when: false
  failed_when: false

- name: check | Check if daemon is running
  set_fact:
    scale_daemon_running: "{{ true if scale_daemon_procs.rc == 0 else false }}"

# Make default variables available in hostvars
- name: check | Set default daemon nodename
  set_fact:
    scale_daemon_nodename: "{{ scale_daemon_nodename }}"
  when: hostvars[inventory_hostname].scale_daemon_nodename is undefined

# set dynamic variable based on supported OS
- name: check | Set variables based on yum/dnf based OS
  include_tasks: yum/set_vars.yml
  when: ansible_distribution in scale_rhel_distribution

- name: check | Set variables based on apt based os
  include_tasks: apt/set_vars.yml
  when: ansible_distribution in scale_ubuntu_distribution

- name: check | Set variables based on zypper based OS
  include_tasks: zypper/set_vars.yml
  when: ansible_distribution in scale_sles_distribution

- name: check | Storage Scale GPG key
  set_fact:
    scale_gpg_key_name: "Storage_Scale_public_key.pgp"
  when: scale_version is defined and  scale_version >= "5.1.8.0"

# Copy and import gpg key on RHEL and SLES if gpfs version >= 5.0.5.0
- block:
    - name: check | Copy key
      get_url:
        url: "{{ scale_gpgKey_repository_src }}"
        dest: "{{ scale_gpgKey_dest }}"
        validate_certs: no

    - rpm_key:
        state: present
        key: "{{ scale_gpgKey_dest }}/{{ scale_gpg_key_name }}"
  when:
    ((ansible_distribution in scale_sles_distribution or ansible_distribution in scale_rhel_distribution)
    and scale_enable_gpg_check and scale_version >= "5.0.5.0"
    and scale_install_repository_url is defined)
