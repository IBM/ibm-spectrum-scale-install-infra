---
- name: configure | Initialize lists
  set_fact:
   scale_ces_disabled_nodes: []
   scale_export_ips: ""
   scale_server_nodes: ""
   scale_service_list: []
   scale_ces_nodes: ""

- name: configure | Collect status of ces shared root
  shell:
   cmd: "{{ scale_command_path }}mmlsconfig | grep 'cesSharedRoot '"
  register: scale_ces_status
  ignore_errors: true

- name: configure | Configuring cesSharedRoot
  command: "{{ scale_command_path }}mmchconfig cesSharedRoot={{ scale_protocols.mountpoint }}"
  when: scale_ces_status.rc > 0

- name: configure | Prepare server nodes string
  set_fact:
   scale_server_nodes: "{{ scale_server_nodes + ',' + item|string }}"
  with_items:
  - "{{ scale_protocol_node_list }}"

- name: configure | Setting server licenses on protocol nodes
  command: "{{ scale_command_path }}mmchlicense server --accept -N {{ scale_server_nodes[1:] }}"
  delegate_to: "{{ scale_protocol_node_list.0 }}"

- name: configure | Collect status of ces nodes
  shell:
   cmd: "{{ scale_command_path }}mmces node list|grep {{ item }}"
  register: scale_ces_enable_status
  with_items:
  - "{{ scale_protocol_node_list }}"
  delegate_to: "{{ scale_protocol_node_list.0 }}"
  ignore_errors: true

- name: configure | Collect all nodes on which ces is not enabled
  set_fact:
   scale_ces_disabled_nodes: "{{ scale_ces_disabled_nodes + [ item.item ]}}"
  when: item.rc > 0
  with_items:
  - "{{ scale_ces_enable_status.results }}"

- name: configure | Install arping
  package:
   name: arping
   state: present
  when: ansible_distribution in scale_ubuntu_distribution and ansible_fqdn in scale_protocol_node_list

- name: configure | Check if SMB is running
  shell:
   cmd: "{{ scale_command_path }}mmces service list|grep SMB"
  register: scale_service_status
  when: ansible_fqdn in scale_protocol_node_list
  ignore_errors: true
  failed_when: false
  run_once: true

- name: configure | Add SMB service to list
  set_fact:
   scale_service_list: "{{ scale_service_list + [scale_service_status.stderr|regex_search('SMB')] }}"
  when: ansible_fqdn in scale_protocol_node_list and scale_service_status.rc > 0
  run_once: true

- name: configure | Add SMB service to list
  set_fact:
   scale_service_list: "{{ scale_service_list + ['SMB'] }}"
  when: ansible_fqdn in scale_protocol_node_list and scale_service_status.rc == 0
  run_once: true

- name: configure | Check if NFS is running
  shell:
   cmd: "{{ scale_command_path }}mmces service list|grep NFS"
  register: scale_service_status
  when: ansible_fqdn in scale_protocol_node_list
  ignore_errors: true
  failed_when: false
  run_once: true

- name: configure | Add NFS service to the list
  set_fact:
   scale_service_list: "{{ scale_service_list + [scale_service_status.stderr|regex_search('NFS')] }}"
  when: ansible_fqdn in scale_protocol_node_list and scale_service_status.rc > 0
  run_once: true

- name: configure | Add NFS service to the list
  set_fact:
   scale_service_list: "{{ scale_service_list + ['NFS'] }}"
  when: ansible_fqdn in scale_protocol_node_list and scale_service_status.rc == 0
  run_once: true

- import_role:
   name: nfs/node
  when: scale_ces_disabled_nodes|length > 0 and 'NFS' in scale_service_list

- import_role:
   name: smb/node
  when: scale_ces_disabled_nodes|length > 0 and 'SMB' in scale_service_list

- name: configure | Prepare ces nodes string
  set_fact:
   scale_ces_nodes: "{{ scale_ces_nodes + ',' + item|string }}"
  with_items:
  - "{{ scale_ces_disabled_nodes }}"
  when: scale_ces_disabled_nodes|length > 0

- name: configure | Enabling CES
  command: "{{ scale_command_path }}mmchnode -N {{ scale_ces_nodes[1:] }} --ces-enable"
  async: 45
  poll: 5
  when: scale_ces_disabled_nodes|length > 0
  delegate_to: "{{ scale_protocol_node_list.0 }}"
  run_once: true

  #- name: configure | Collect status of ces nodes
  #shell:
  # cmd: "{{ scale_command_path }}mmces node list|grep {{ item }}"
  #register: scale_ces_enable_status
  #with_items:
  #- "{{ scale_protocol_node_list }}"
  #delegate_to: "{{ scale_protocol_node_list.0 }}"

  #- name: configure | Check CES enabled on all nodes
  #assert:
  # that:
  # -  item.rc == 0
  # fail_msg: "CES is not enabled on {{ ansible_hostname }} protocol node"
  #with_items:
  #- "{{ scale_ces_enable_status.results }}"
  #delegate_to: "{{ scale_protocol_node_list.0 }}"

- name: configure| Collect status of ces nodes
  command: "{{ scale_command_path }}mmces node list"
  register: scale_ces_enable_status
  delegate_to: "{{ scale_protocol_node_list.0 }}"
  run_once: true

- name: configure| List status of ces nodes
  debug:
    var: scale_ces_enable_status.stdout_lines
  run_once: true

- name: configure| Check CES enabled on all nodes
  assert:
    that:
      - "item in scale_ces_enable_status.stdout"
    fail_msg: "CES is not enabled on {{ item }} protocol node"
    success_msg: "Successful enabling of CES on protocol node {{ item }}"
  with_items:
    - "{{ scale_protocol_node_list }}"
  delegate_to: scale_protocol_node_list.0
  run_once: true

- name: configure | Add IPv6 interface
  shell:
   cmd: "{{ scale_command_path }}mmces interface add --nic {{ item }}"
  when: scale_ces_ipv6_list|length > 0 and scale_protocols.interface|length > 0
  with_items:
  - "{{ scale_protocols.interface }}"

- name: configure | Enable interface mode
  shell:
   cmd: "mmces interface mode interface --force"
  when: scale_ces_ipv6_list|length > 0

- block:
  - name: configure | Create CES groups
    shell:
     cmd: "{{ scale_command_path }}mmchnode --ces-group {{ item.group_name }} -N {{ item.node_list|join(',') }}"
    with_items:
    - "{{ scale_protocols.scale_ces_groups }}"

  - name: configure | Assign export ips as pool for CES groups
    command: "{{ scale_command_path }}mmces address add --ces-ip {{ item.export_ip_pool|join(',') }} --ces-group {{ item.group_name}}"
    when: ansible_fqdn in scale_protocol_node_list
    delegate_to: "{{ scale_protocol_node_list.0 }}"
    with_items:
    - "{{ scale_protocols.scale_ces_groups }}"
  when: scale_protocols.scale_ces_groups is defined and scale_protocols.scale_ces_groups|length > 0

- block:
  - name: configure | Prepare export ips string
    set_fact:
     scale_export_ips: "{{ scale_export_ips + ',' + item|string }}"
    with_items:
    - "{{ scale_protocols.export_ip_pool }}"

  - name: configure | Assign export ips as pool
    command: "{{ scale_command_path }}mmces address add --ces-ip {{ scale_export_ips[1:] }}"
    when: ansible_fqdn in scale_protocol_node_list and scale_protocols.scale_ces_groups is not defined
    delegate_to: "{{ scale_protocol_node_list.0 }}"
  when: scale_protocols.scale_ces_groups is not defined

- name: configure | Rebalance CES IPs
  command: "{{ scale_command_path }}mmces address move --rebalance"
  when: ansible_fqdn in scale_protocol_node_list
  delegate_to: "{{ scale_protocol_node_list.0 }}"

- name: configure | Check if zimon sensor is configured
  shell: "/usr/lpp/mmfs/bin/mmperfmon config show"
  register: scale_zimon_conf_sensors
  failed_when: false
  changed_when: false
