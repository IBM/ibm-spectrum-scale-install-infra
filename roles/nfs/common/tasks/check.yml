---
# role to check if all ces configuration is properly defined
# protocols variable defined in group_vars/

- name: check | Initialize
  set_fact:
   scale_protocol_node_list: []
   scale_admin_node_list: []
   scale_os_list: []
   scale_arch_list: []
   scale_export_ip: []
  run_once: true

- name: check | Collect all protocol nodes
  set_fact:
   scale_protocol_node_list: "{{ scale_protocol_node_list + [hostvars[item]['ansible_fqdn']] }}"
  when: hostvars[item]['is_protocol_node'] is defined and hostvars[item]['is_protocol_node']|bool
  with_items:
   - "{{ ansible_play_hosts }}"
  delegate_to: localhost
  run_once: true

- name: check | Check if atleast one protocol node is present
  assert:
   that:
   - scale_protocol_node_list|length > 0
   fail_msg: "Atleast one protocol node is required.Please define a protocol node."
  delegate_to: localhost
  run_once: true

- name: check | Collect all protocol node OS
  set_fact:
   scale_os_list: "{{ scale_os_list + [hostvars[item]['ansible_distribution']] }}"
  when: hostvars[item]['is_protocol_node'] is defined and hostvars[item]['is_protocol_node']|bool
  with_items:
  - "{{ ansible_play_hosts }}"
  delegate_to: localhost

- name: check | Check if OS is unique
  assert:
   that:
   - scale_os_list|unique|length == 1
   fail_msg: "Mix Operating system found on protocol nodes, please make sure same OS on all protocol nodes."
  delegate_to: localhost
  run_once: true

- name: check | Collect all protocol node architecture
  set_fact:
   scale_arch_list: "{{ scale_arch_list + [hostvars[item]['ansible_architecture']] }}"
  when: hostvars[item]['is_protocol_node'] is defined and hostvars[item]['is_protocol_node']|bool
  with_items:
  - "{{ ansible_play_hosts }}"
  delegate_to: localhost

- name: check | Check if all protocol nodes have same architecture
  assert:
   that:
   - scale_arch_list|unique|length == 1
   fail_msg: "Mix architecture found on protocol nodes, please make sure all protocol nodes have same machine architecture."
  delegate_to: localhost
  run_once: true

- name: check | Check if cesSharedRoot filesystem defined
  assert:
   that:
   - scale_protocols.filesystem is defined
   - scale_protocols.filesystem | length > 0
   fail_msg: "Installer did not find the file system to be used for CES (protocols) shared root.
Please define the CES shared root file system in the inventory."

- name: check | Check if mount point defined for cesSharedRoot file system
  assert:
   that:
   - scale_protocols.mountpoint is defined
   - scale_protocols.mountpoint|length > 0
   fail_msg: "Installer did not find the file system mount point point to be used for CES (protocols) shared root.
Please define the CES shared root file system mount point in the inventory."

- name: check | Check if ces export ips are defined
  assert:
   that:
   - scale_protocols.export_ip_pool is defined
   - scale_protocols.export_ip_pool|length > 0
   fail_msg: "CES export ip pool is not defined or empty"
  run_once: true

- name: check | Collect unique export ips
  set_fact:
   scale_export_ip: "{{ scale_protocols.export_ip_pool|unique }}"
  run_once: true

- name: check | Check if export ips are duplicated
  assert:
   that:
   - scale_protocols.export_ip_pool|length == scale_export_ip|length
   fail_msg: "Duplicate ips found in export ip pool"
  run_once: true

- name: check | Get list of GPFS nodes which are not reporting active state
  shell:
   cmd: "{{ scale_command_path }}mmgetstate|grep active"
  register: inactive_nodes
  ignore_errors: true

- name: check | Check if any nodes are inactive
  assert:
   that:
   - inactive_nodes.rc == 0
   fail_msg: "GPFS is not active on: {{ ansible_hostname }}. Ensure GPFS is active on all nodes before continuing with the install toolkit"

- name: check | Check if ccr is enabled
  shell:
   cmd: "{{ scale_command_path }}mmlscluster|grep CCR"
  register: ccr_status

- name: check | Check if ccr is enabled
  assert:
   that:
   - ccr_status.rc == 0
   fail_msg: "CCR is not enabled on the cluster. CCR must be enabled to install protocols"
