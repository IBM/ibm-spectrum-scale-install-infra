---
# Dir package installation method

- block:  ## run_once: true
    - name: install | Stat directory installation package
      stat:
        path: "{{ scale_install_directory_pkg_path }}"
      register: scale_install_dirpkg

    - name: install | Check directory installation package
      assert:
        that: scale_install_dirpkg.stat.exists
        msg: >-
          Please set the variable 'scale_install_directory_pkg_path' to point to the
          local installation package (accessible on Ansible control machine)!
  run_once: true
  delegate_to: localhost

- name: install| Creates default directory
  file:
    path: "{{ scale_extracted_path }}"
    state: directory
    mode: a+x
    recurse: yes

- name: install | Stat extracted packages
  stat:
    path: "{{ scale_extracted_path + '/' + scale_install_directory_pkg_path | basename }}"
  register: scale_install_gpfs_packagedir

#
# Copy installation directory package to default
#
- block:
    - name: install | Copy installation package to node
      copy:
        src: "{{ scale_install_directory_pkg_path }}"
        dest: "{{ scale_extracted_path }}"
        mode: a+x

- name: install | Set installation package path
  set_fact:
    dir_path: "{{ scale_extracted_path + '/' + scale_install_directory_pkg_path | basename }}"

- name: install | gpfs base path
  set_fact:
    gpfs_path_url: "{{ dir_path }}"
  when: scale_install_directory_pkg_path is defined

#
# Find GPFS GUI
#

# Find nfs rpms
- block:  ## when: host is defined as a protocol node

  - name: install | Find gpfs.smb (gpfs.smb) package
    find:
     paths:  "{{ gpfs_path_url }}"
     patterns: gpfs.smb*
    register: scale_install_gpfs_smb

  - name: install | Check valid GPFS (gpfs.smb) package
    assert:
     that: scale_install_gpfs_smb.matched > 0
     msg: "No GPFS SMB  package found {{ gpfs_path_url }}gpfs.smb*"

  - name: install | Add GPFS package to list
    vars:
     current_package: "{{ item.path }}"
    set_fact:
     scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
    with_items:
    - "{{ scale_install_gpfs_smb.files }}"
  when: ansible_distribution in scale_ubuntu_distribution

- block:  ## when: host is defined as a protocol node

  - name: install | Find gpfs.nfs-ganesha (gpfs.nfs-ganesha) package
    find:
     paths:  "{{ gpfs_path_url }}"
     patterns: gpfs.nfs-ganesha_*
    register: scale_install_gpfs_nfs_ganesha

  - name: install | Check valid GPFS (gpfs.nfs-ganesha) package
    assert:
     that: scale_install_gpfs_nfs_ganesha.matched > 0
     msg: "No GPFS nfs ganesha(gpfs.nfs-ganesha) package found {{ gpfs_path_url }}gpfs.nfs-ganesha*"
  
  - name: install | Add GPFS package to list
    vars:
     current_package: "{{ item.path }}"
    set_fact:
     scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
    when: scale_install_gpfs_nfs_ganesha.files is defined
    with_items:
    - "{{ scale_install_gpfs_nfs_ganesha.files }}"
  when: ansible_distribution in scale_ubuntu_distribution

- block:  ## when: host is defined as a protocol node

  - name: install | Find gpfs.nfs-ganesha (gpfs.nfs-ganesha) package
    find:
     paths:  "{{ gpfs_path_url }}"
     patterns: gpfs.nfs-ganesha*
    register: scale_install_gpfs_nfs_ganesha

  - name: install | Check valid GPFS (gpfs.nfs-ganesha) package
    assert:
     that: scale_install_gpfs_nfs_ganesha.matched > 0
     msg: "No GPFS nfs ganesha(gpfs.nfs-ganesha) package found {{ gpfs_path_url }}gpfs.nfs-ganesha*"

  - name: install | Add GPFS package to list
    vars:
     current_package: "{{ item.path }}"
    set_fact:
     scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
    when: scale_install_gpfs_nfs_ganesha.files is defined
    with_items:
    - "{{ scale_install_gpfs_nfs_ganesha.files }}"
  when: ansible_distribution in scale_rhel_distribution or ansible_distribution in scale_sles_distribution

- block:
  - name: install | Find gpfs.nfs-ganesha-utils (gpfs.nfs-ganesha) package
    find:
     paths:  "{{ gpfs_path_url }}"
     patterns: gpfs.nfs-ganesha-utils*
    register: scale_install_gpfs_nfs_utils

  - name: install | Check valid GPFS (gpfs.nfs-ganesha) package
    assert:
     that: scale_install_gpfs_nfs_utils.matched > 0
     msg: "No GPFS utils (gpfs.nfs-ganesha-utils) package found {{ gpfs_path_url }}gpfs.nfs-ganesha-utils*"
  when: ansible_distribution in scale_rhel_distribution

- block:
  - name: install | Find gpfs.nfs-ganesha-gpfs (gpfs.nfs-ganesha) package
    find:
     paths:  "{{ gpfs_path_url }}"
     patterns: gpfs.nfs-ganesha-gpfs*
    register: scale_install_gpfs_nfs_gpfs

  - name: install | Check valid GPFS (gpfs.nfs-ganesha) package
    assert:
     that: scale_install_gpfs_nfs_gpfs.matched > 0
     msg: "No GPFS utils (gpfs.nfs-ganesha-gpfs)  found {{ gpfs_path_url }}gpfs.nfs-ganesha-gpfs*"

- block:
  - name: install | Find gpfs.nfs-ganesha-doc (gpfs.nfs-ganesha-doc) package
    find:
     paths:  "{{ gpfs_path_url }}"
     patterns: gpfs.nfs-ganesha-doc*
    register: scale_install_gpfs_nfs_doc

  - name: install | Check valid GPFS (gpfs.nfs-ganesha-doc) package
    assert:
     that: scale_install_gpfs_nfs_doc.matched > 0
     msg: "No GPFS utils (gpfs.nfs-ganesha-doc) package found {{ gpfs_path_url }}gpfs.nfs-ganesha-doc*"
  when: ansible_distribution in scale_ubuntu_distribution

- block:
  - name: install | Find gpfs.python-nfs-ganesha (gpfs.python-nfs-ganesha) package
    find:
     paths:  "{{ gpfs_path_url }}"
     patterns: gpfs.python-nfs-ganesha*
    register: scale_install_gpfs_nfs_python

  - name: install | Check valid GPFS (gpfs.python-nfs-ganesha) package
    assert:
     that: scale_install_gpfs_nfs_python.matched > 0
     msg: "No GPFS utils (gpfs.python-nfs-ganesha) package found {{ gpfs_path_url }}gpfs.python-nfs-ganesha*"
  when: ansible_distribution in scale_ubuntu_distribution

- block:
  - name: install | Find gpfs.pm-ganesha (gpfs.pm-ganesha) package
    find:
     paths:  "{{ gpfs_path_url }}"
     patterns: gpfs.pm-ganesha*
    register: scale_install_gpfs_nfs_pm

  - name: install | Check valid GPFS (gpfs.pm-ganesha) package
    assert:
     that: scale_install_gpfs_nfs_pm.matched > 0
     msg: "No GPFS utils (gpfs.pm-ganesha) package found {{ gpfs_path_url }}gpfs.pm-ganesha*"
  when: ansible_distribution in scale_rhel_distribution or ansible_distribution in scale_ubuntu_distribution

- block:  ## when: host is defined as a protocol node

  - name: install | Find gpfs.nfs-ganesha (gpfs.nfs-ganesha) package
    find:
     paths:  "{{ gpfs_path_url }}"
     patterns: gpfs.nfs-ganesha-debuginfo*
    register: scale_install_gpfs_nfs_ganesha_debuginfo

  - name: install | Check valid GPFS (gpfs.nfs-ganesha-debuginfo) package
    assert:
     that: scale_install_gpfs_nfs_ganesha_debuginfo.matched > 0
     msg: "No GPFS nfs ganesha(gpfs.nfs-ganesha-debuginfo) package found {{ gpfs_path_url }}gpfs.nfs-ganesha-debuginfo*"
  when: ansible_distribution in scale_rhel_distribution or ansible_distribution in scale_sles_distribution

- name: install | Add GPFS package to list
  vars:
   current_package: "{{ item.path }}"
  set_fact:
   scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
  with_items:
  - "{{ scale_install_gpfs_nfs_python.files }}"
  - "{{ scale_install_gpfs_nfs_doc.files }}"
  when: ansible_distribution in scale_ubuntu_distribution

- name: install | Add GPFS package to list
  vars:
   current_package: "{{ item.path }}"
  set_fact:
   scale_install_all_packages: "{{ scale_install_all_packages + [ current_package ] }}"
  with_items:
  - "{{ scale_install_gpfs_nfs_pm.files }}"
  when: ansible_distribution in scale_rhel_distribution or ansible_distribution in scale_ubuntu_distribution

- block:
  - name: install | initialize
    set_fact:
     debuginfo_package: []

  - name: install | Add GPFS package to list
    set_fact:
     debuginfo_package: "{{ debuginfo_package + [ item.path ] }}"
    with_items:
    - "{{ scale_install_gpfs_nfs_ganesha_debuginfo.files }}"

  - name: install | remove debuginfo from packages
    set_fact:
     scale_install_all_packages: "{{ scale_install_all_packages | difference(debuginfo_package)}}"
  when: not install_debuginfo|bool and ansible_distribution in scale_rhel_distribution

- debug:
        msg: "{{ scale_install_all_packages }}"
