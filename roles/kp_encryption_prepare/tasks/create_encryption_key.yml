- block:
    - name: KeyProtect Encryption | Encryption Prepare | Check if .p12 cert exists
      stat:
        path: "{{ key_protect_dir }}/{{ resource_prefix }}.p12"
      register: cert_file_stat

    - name: Run mmgskkm store command | Encryption Prepare | Create a .p12 Store Cert
      command: mmgskkm store --pwd "{{ scale_encryption_admin_password }}" --label "{{ resource_prefix }}" --cert "{{ key_protect_dir }}/{{ resource_prefix }}.cert" --priv "{{ key_protect_dir }}/{{ resource_prefix }}.key" --out "{{ key_protect_dir }}/{{ resource_prefix }}.p12"
      args:
        chdir: "{{ key_protect_dir }}"
      when: not cert_file_stat.stat.exists
      run_once: true

    - name: Run mmgskkm trust command | Encryption Prepare | Apply Trust on .p12 Cert
      command: mmgskkm trust --prefix "{{ key_protect_dir }}/Key_Protect_Server.chain" --pwd "{{ scale_encryption_admin_password }}" --label "{{ resource_prefix }}" --out "{{ key_protect_dir }}/{{ resource_prefix }}.p12"
      args:
        chdir: "{{ key_protect_dir }}"
      when: not cert_file_stat.stat.exists
      run_once: true

    - name: Sleep for 20 seconds
      ansible.builtin.pause:
        seconds: 20

    - name: KeyProtect Encryption | Encryption Prepare | Check if key creation has already performed
      stat:
        path: "{{ key_protect_dir }}/key_creation_done.flag"
      register: flag_file_stat

    - name: KeyProtect Encryption | Encryption Prepare | Create Encryption Key
      command: >
        mmkmipkm createkey
        --host "{{ vpc_region }}.kms.cloud.ibm.com"
        --kmipport "{{ resource_prefix }}.port"
        --keystore "{{ key_protect_dir }}/{{ resource_prefix }}.p12"
        --keypass "{{ key_protect_dir }}/{{ resource_prefix }}.pwd"
        --label "{{ resource_prefix }}"
      args:
        chdir: "{{ key_protect_dir }}"
      register: createkey_output
      when: cert_file_stat.stat.exists and not flag_file_stat.stat.exists
      failed_when: "'error' in createkey_output.stderr or createkey_output.rc != 0"
      run_once: true

    - name: Debug createkey_output
      debug:
        var: createkey_output
      when: createkey_output is defined

    - name: KeyProtect Encryption | Encryption Prepare | Create flag to indicate key creation has been performed
      file:
        path: "{{ key_protect_dir }}/key_creation_done.flag"
        state: touch
      when: cert_file_stat.stat.exists and not flag_file_stat.stat.exists
      run_once: true

    - name: KeyProtect Encryption | Encryption Prepare | Set Encryption key fact
      set_fact:
        encryption_key: "{{ createkey_output.stdout if createkey_output is defined and 'stdout' in createkey_output and createkey_output.stdout != '' }}"
      when: cert_file_stat.stat.exists and not flag_file_stat.stat.exists
      run_once: true

    - name: KeyProtect Encryption | Encryption Prepare | Copy Policy file
      template:
        src: "templates/KP.fsenc.pol.j2"
        dest: "/var/mmfs/etc/KP.fsenc.pol"
        owner: root
        group: root
        mode: '0600'
      when: encryption_key is defined and encryption_key != ''
      run_once: true

  when: key_protect_dir is defined and key_protect_dir | length > 0