---
# sample/playbook_iptables_add.yml
#
# playbook sample for updating the iptables on bastion server for
# gui access.

# This file is mandatory to import and it will load inventory variables form
# vars/gui_access_clusterdefinition.json
- import_playbook: "set_json_variables_gui.yml"

- hosts: scale_node
  remote_user: "{{ scale_jump_host_user }}"
  gather_facts: yes
  vars:
    ansible_timeout: 300
  tasks:
    - name: Install iptables on RHEL/CentOS/Amazon/Ubuntu
      become: yes
      package:
        name: iptables
        state: present
      when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Amazon"
      register: result

    - name: Debug Install iptables on RHEL/CentOS/Amazon
      debug:
        var: result

    - name: Install iptables-services package on RHEL/CentOS
      become: yes
      dnf:
        name: iptables-services
        state: present
      register: result
      when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS"

    - name: Debug Install iptables-services package on RHEL/CentOS
      debug:
        var: result

    - name: Stop and disable firewalld on RHEL/CentOS
      become: yes
      systemd:
        name: firewalld
        state: stopped
        enabled: no
      register: result
      when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS"

    - name: Debug Stop and disable firewalld on RHEL/CentOS
      debug:
        var: result

    - name: Start and enable iptables on RHEL/CentOS
      become: yes
      systemd:
        name: iptables
        state: started
        enabled: yes
      register: result
      when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS"

    - name: Debug Start and enable iptables on RHEL/CentOS
      debug:
        var: result

    - name: Enable IP forwarding
      become: yes
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present
      register: result

    - name: Debug Enable IP forwarding
      debug:
        var: result

    - name: Create DNAT rule
      become: yes
      iptables:
        chain: PREROUTING
        table: nat
        protocol: tcp
        rule_num: 1
        jump: DNAT
        destination_port: "{{ scale_forwarding_port }}"
        to_destination: "{{ scale_gui_node }}:{{ scale_gui_port }}"
        state: present
      register: result

    - name: Debug create DNAT result
      debug:
        var: result

    - name: Create MASQUERADE rule
      become: yes
      iptables:
        chain: POSTROUTING
        table: nat
        protocol: tcp
        rule_num: 2
        jump: MASQUERADE
        destination_port: "{{ scale_gui_port }}"
        destination: "{{ scale_gui_node }}"
        state: present
      register: result

    - name: Debug create MASQUERADE result
      debug:
        var: result

    - name: Create MASQUERADE rule for all traffic
      become: yes
      register: result
      iptables:
        chain: POSTROUTING
        table: nat
        rule_num: 3
        jump: MASQUERADE
        state: present

    - name: Debug create MASQUERADE all result
      debug:
        var: result

    - name: Remove the specific iptables rule
      become: yes
      shell: iptables -D FORWARD 1
      when: ansible_distribution == "CentOS"
      ignore_errors: true
      register: result

    - name: Debug Remove the iptables rule
      debug:
        var: result

    - name: Save IPtables rules on Amazon
      become: yes
      ansible.builtin.command: /sbin/service iptables save
      when: ansible_distribution == "Amazon"
      register: result

    - name: Debug Save iptables rules on Amazon
      debug:
        var: result

    - name: Ensure /etc/sysconfig/ directory exists on RHEL/CentOS
      become: yes
      file:
        path: /etc/sysconfig/
        state: directory
      when: ansible_distribution == "RedHat"
      register: result

    - name: Debug Save iptables rules on RHEL/CentOS
      debug:
        var: result

    - name: Save iptables rules on RHEL
      become: yes
      shell: iptables-save > /etc/sysconfig/iptables
      register: result
      when: ansible_distribution == "RedHat"

    - name: Debug Save iptables rules on RHEL/CentOS
      debug:
        var: result

    - name: Save iptables rules on CentOS
      become: yes
      shell: service iptables save
      register: result
      when: ansible_distribution == "CentOS"

    - name: Debug Save iptables rules on CentOS
      debug:
        var: result
